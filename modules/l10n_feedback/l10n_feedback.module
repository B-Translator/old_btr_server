<?php

/**
 * @file
 * Module file for l10n_feedback.
 */

require_once(dirname(__FILE__) . '/includes/common.inc');
require_once(dirname(__FILE__) . '/includes/cron.inc');

/**
 * Implements hook_help().
 */
                               /*
function l10n_feedback_help($path, $args) {
  switch($path)
    {
      case 'translations/get':
        $help = t('Get translation suggestions for a given string.');
        break;

      case 'translations/vote':
        $help = t('Vote the best translation for a string, or suggest a better translation.');
        break;
    }

  return $help;
}
                               */

/**
 * Implements hook_menu().
 */
function l10n_feedback_menu() {

  $items['admin/config/system/btranslator'] = array(
    'title'            => 'B-Translator',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('l10n_feedback_config'),
    'access arguments' => array('administer btranslator'),
    'description'      => 'B-Translator configuration settings.',
    'file'             => 'l10n_feedback.admin.inc',
  );

  $items['translations'] = array(
    'type'            => MENU_NORMAL_ITEM,
    'title'           => 'Translations',
    'description'     => 'Vote the best translation for a string, or suggest a better translation.',
    'page callback'   => 'l10n_feedback_vote',
    'file'            => 'includes/translations/vote.inc',
    'access callback' => TRUE,
  );

  $items['translations/vote'] = array(
    'type'            => MENU_DEFAULT_LOCAL_TASK,
    'title'           => 'Vote',
    'weight'          => 1,
  );

  $items['translations/search'] = array(
    'type'            => MENU_LOCAL_TASK,
    'title'           => 'Search',
    'description'     => 'Search strings and translations using various filters.',
    'page callback'   => 'l10n_feedback_search',
    'file'            => 'includes/translations/search.inc',
    'access callback' => TRUE,
    'weight'          => 2,
  );

  $items['translations/export'] = array(
    'type'            => MENU_LOCAL_TASK,
    'title'           => 'Export',
    'description'     => 'Export the most voted translations of a project into a PO file.',
    'page callback'   => 'l10n_feedback_export',
    'file'            => 'includes/translations/export.inc',
    'access callback' => TRUE,
    'weight'          => 3,
  );

  $items['translations/import'] = array(
    'type'            => MENU_LOCAL_TASK,
    'title'           => 'Import',
    'description'     => 'Import strings and translations from POT/PO files of projects.',
    'page callback'   => 'l10n_feedback_import',
    'file'            => 'includes/translations/import.inc',
    'access callback' => TRUE,
    'weight'          => 4,
  );

  $items['translations/get'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'Get l10n Translation',
    'description'     => 'Get translation suggestions for a given string.',
    'page callback'   => 'l10n_feedback_get',
    'file'            => 'includes/translations/get.inc',
    'access callback' => TRUE,
  );

  // Return a plain-text list of all the imported projects,
  // filtered by the given origin/project.
  $items['translations/project/list'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'Project List',
    'page callback'   => 'l10n_feedback_project_list',
    'file'            => 'includes/projects.inc',
    'access callback' => TRUE,
  );

  // Return as plain-text the PO file for a given origin/project/lng.
  $items['translations/project/export'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'Project Export',
    'page callback'   => 'l10n_feedback_project_export',
    'file'            => 'includes/projects.inc',
    'access callback' => TRUE,
  );

  // Return as an archive the PO files for a given origin/project/lng.
  // Usefull for projects that have many POT files, like LibreOffice, Mozilla, etc.
  $items['translations/project/export_tgz'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'Project Export',
    'page callback'   => 'l10n_feedback_project_export_tgz',
    'file'            => 'includes/projects.inc',
    'access callback' => TRUE,
  );

  // Return as plain-text the diff of the PO file for a given origin/project/lng,
  // which contains the latest most-voted suggestions since the last snapshot.
  // It gets the parameters origin/project/lng[/nr[/ediff]].
  $items['translations/project/diff'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'Project Export',
    'page callback'   => 'l10n_feedback_project_diff',
    'file'            => 'includes/projects.inc',
    'access callback' => TRUE,
  );

  // Return a string context, related projects (where a string is found), etc.
  $items['translations/string_details'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'String details',
    'page callback'   => 'l10n_feedback_string_details',
    'file'            => 'includes/ajax_callbacks.inc',
    'access callback' => TRUE,
  );

  // Autocomplete callback for project textfields.
  $items['translations/autocomplete/project'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'Project autocomplete',
    'page callback'   => 'l10n_feedback_project_autocomplete',
    'file'            => 'includes/ajax_callbacks.inc',
    //'access arguments' => array('access localization community'),
    'access callback' => TRUE,
  );

  // Autocomplete callback for origin textfields.
  $items['translations/autocomplete/origin'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'Origin autocomplete',
    'page callback'   => 'l10n_feedback_origin_autocomplete',
    'file'            => 'includes/ajax_callbacks.inc',
    //'access arguments' => array('access localization community'),
    'access callback' => TRUE,
  );

  // Autocomplete callback for user textfields.
  $items['translations/autocomplete/user'] = array(
    'type'            => MENU_CALLBACK,
    'title'           => 'User autocomplete',
    'page callback'   => 'l10n_feedback_user_autocomplete',
    'file'            => 'includes/ajax_callbacks.inc',
    //'access arguments' => array('access localization community'),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 */
function l10n_feedback_permission() {
  return array(
    'administer btranslator' => array(
      'title' => t('Administer B-Translator.'),
      'description' => t('Perform administration tasks for B-Translator.'))
  );
}  //  End of l10n_feedback_permission().

/**
 * Implements hook_theme().
 */
function l10n_feedback_theme($existing, $type, $theme, $path) {
  return array(
    'l10n_feedback_filter_form_element' => array(
      'render element' => 'element',
    ),
    'l10n_feedback_translate_translation' => array(
      'render element' => 'element',
    ),
    'l10n_feedback_translate_actions' => array(
      'render element' => 'element',
    ),
    'l10n_feedback_in_context' => array(
      'variables' => array('source' => NULL),
    ),
    'l10n_feedback_translate_radio' => array(
      'render element' => 'element',
    ),
    'l10n_feedback_translate_source' => array(
      'render element' => 'element',
    ),
    'l10n_feedback_translate_translation_list' => array(
      'render element' => 'element',
    ),
    'l10n_feedback_translate_table' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implement hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from drupal_mail(). The goal
 * of hook_mail() is to set the message's 'subject' and 'body' properties, as
 * well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of drupal_mail(). So it's
 * a callback of a type, but not a hook.
 */
function l10n_feedback_mail($key, &$message, $params) {
  switch ($key) {
    // Send a string for review.
    case 'send_string_by_email':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}

/**
 * Implements hook_init().
 *
 * Add stylesheets and block search engines from web application pages.
 */
function l10n_feedback_init() {
  if (arg(0) == 'translation') {
    drupal_add_css(drupal_get_path('module', 'l10n_feedback') . '/l10n_feedback.css');
    // For the translation overview pages. This is used to present admin page like panels.
    drupal_add_css(drupal_get_path('module', 'system') . '/admin.css');
  }

  // Check if language is RTL
  $languages = l10n_feedback_get_languages();
  $lng = arg(2);
  if (array_key_exists($lng, $languages)) {
    // Add RTL style if the current language's direction is RTL
    if ($languages[$lng]['direction'] == LANGUAGE_RTL) {
      drupal_add_css(drupal_get_path('module', 'l10n_feedback') . '/l10n_feedback-rtl.css');
    }
  }

  // Disable breadcrumb.
  drupal_set_breadcrumb(array());
}
?>