<?php
/**
 * @file
 * Defining blocks of btr_ui.
 */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 * See: http://api.drupal.org/api/drupal/modules%21block%21block.api.php/function/hook_block_info/7
 */
function btr_ui_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.

  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.

  // Displays top 5 (or 10) contributors, over the last week (or month).
  $blocks['topcontrib'] = array(
    'info' => t('B-Translator: Top contributors during the last period'),  // The name of the block.
    'cache' => DRUPAL_CACHE_CUSTOM,
  );

  // Suggestion and voting statistics for the last week, month and year.
  $blocks['statistics'] = array(
    'info' => t('B-Translator: Contribution statistics (for the last week, month and year)'),
    'cache' => DRUPAL_CACHE_CUSTOM,
  );

  // Suggestions and votes submited lately.
  $blocks['latest'] = array(
    'info' => t('B-Translator: Latest contributions'),
    'cache' => DRUPAL_CACHE_CUSTOM,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */
function btr_ui_block_configure($delta = '') {
  // The $delta parameter tells us which block is being configured.

  $form = array();

  if ($delta == 'topcontrib') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    $form['btr_ui_topcontrib_size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of the list'),
      '#description' => t('The number of top contributers that will be shown in the list (5, 10, etc)'),
      '#default_value' => variable_get('btr_topcontrib_size', 5),
    );
    $form['btr_ui_topcontrib_period'] = array(
      '#type' => 'select',
      '#title' => t('Accumulation period'),
      '#description' => t('The period during which the contributions will be counted (last week or last month).'),
      '#options' => array(
        'week' => t('Last week'),
        'month' => t('Last month'),
      ),
      '#default_value' => variable_get('btr_topcontrib_period', 'week'),
    );
  }

  if ($delta == 'statistics') {
  }

  if ($delta == 'latest') {
  }

  return $form;
}


/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */
function btr_ui_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'topcontrib') {
    // Have Drupal save them to the database.
    variable_set('btr_topcontrib_size', $edit['btr_topcontrib_size']);
    variable_set('btr_topcontrib_period', $edit['btr_topcontrib_period']);
  }

  if ($delta == 'statistics') {
  }

  if ($delta == 'latest') {
  }

  return;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function btr_ui_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'topcontrib':
      // The subject is displayed at the top of the block. Note that it
      // should be passed through t() for translation. The title configured
      // for the block using Drupal UI supercedes this one.
      $nr = variable_get('btr_topcontrib_size', 5);
      $block['subject'] = t('Top @nr contributors', array('@nr' => $nr));
      // The content of the block is typically generated by calling a custom
      // function.
      $block['content'] = _btr_ui_block_topcontrib();
      break;
    case 'statistics':
      $block['subject'] = t('Contribution statistics');
      $block['content'] = _btr_ui_block_statistics();
      break;
    case 'latest':
      $block['subject'] = t('Latest contributions');
      $block['content'] = _btr_ui_block_latest();
      break;
  }

  return $block;
}


/**
 * Generate and return the content of the block topcontrib.
 */
function _btr_ui_block_topcontrib() {

  $cache = cache_get('btr_ui_block_topcontrib', 'cache_btr_ui');
  // Return cache if possible.
  if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
    return $cache->data;
  }

  $lng = variable_get('btr_translation_lng', 'fr');
  $period = variable_get('btr_topcontrib_period', 'week');
  $from_date = date('Y-m-d', strtotime("-1 $period"));
  $size = variable_get('btr_topcontrib_size', 5);

  $topusers = btr_stat_topcontrib($lng, $from_date, $size);

  $output =  array(
    'first_para' => array(
      '#type' => 'markup',
      '#markup' => t("<p>Top !nr contributors since !date:</p>",
                 array(
                   '!nr' => $size,
                   '!date' => $from_date,
                 )),
    ),
    'second_para' => array(
      '#items' => array(),
      '#theme' => 'item_list',
    ),
  );

  foreach ($topusers as $user) {
    $args = array(
      '!uid' => $user->uid,
      '!name' => $user->name,
      '!mail' => $user->umail,
      '!score' => $user->score,
      '!nr_translations' => $user->translations,
      '!nr_votes' => $user->votes,
      '@url_user' => url('user/' . $user->uid),
      '@url_translations' => url('translations/search', array(
                             'query' => array(
                               'lng' => $lng,
                               'translated_by' => $user->name,
                               'from_date' => $from_date
                             ))),
      '@url_votes' => url('translations/search', array(
                      'query' => array(
                        'lng' => $lng,
                        'voted_by' => $user->name,
                        'from_date' => $from_date
                      ))),
    );
    $output['second_para']['#items'][] = t(" <strong><a href='@url_user' target='_blank'>!name</a></strong><br/><a href='@url_translations' target='_blank'>!nr_translations translations</a> + <a href='@url_votes' target='_blank'>!nr_votes votes</a>",
                                         $args);
  }

  // Cache for 12 hours.
  cache_set('btr_ui_block_topcontrib', $output, 'cache_btr_ui', time() + 12*60*60);

  return $output;
}


/**
 * Generate and return the content of the block statistics.
 */
function _btr_ui_block_statistics() {

  $cache = cache_get('btr_ui_block_statistics', 'cache_btr_ui');
  // Return cache if possible.
  if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
    return $cache->data;
  }

  $lng = variable_get('btr_translation_lng', 'fr');
  $stats = btr_statistics($lng);

  foreach ($stats as $period => $stat) {
    $args = array(
      '!nr_votes' => $stat['nr_votes'],
      '!nr_translations' => $stat['nr_translations'],
      '@url_votes' => url('translations/search', array(
                      'query' => array(
                        'lng' => $lng,
                        'limit' => '10',
                        'date_filter' => 'votes',
                        'from_date' => $stat['from_date'],
                      ))),
      '@url_translations' => url('translations/search', array(
                             'query' => array(
                               'lng' => $lng,
                               'limit' => '10',
                               'date_filter' => 'translations',
                               'from_date' => $stat['from_date'],
                             ))),
    );
    $output['ulist']['#items'][] = t("Last $period:") . '<br/>'
      . t(" + <a href='@url_votes'>!nr_votes votes</a> <br/> + <a href='@url_translations'>!nr_translations translations</a>",
        $args);
  }
  /*
  t('Last week:');
  t('Last month:');
  t('Last year:');
  */

  // Cache for 12 hours.
  cache_set('btr_ui_block_statistics', $output, 'cache_btr_ui', time() + 12*60*60);

  return $output;
}


/**
 * Generate and return the content of the block latest.
 */
function _btr_ui_block_latest() {

  $cache = cache_get('btr_ui_block_latest', 'cache_btr_ui');
  // Return cache if possible.
  if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
    return $cache->data;
  }

  // generate the output of the block
  $output = '';


  // Cache for 12 hours.
  cache_set('btr_ui_block_latest', $output, 'cache_btr_ui', time() + 12*60*60);

  return $output;
}
