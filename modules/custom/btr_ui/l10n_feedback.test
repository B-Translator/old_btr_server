<?php

/**
 * @file
 * Test cases for the module l10n_feedback.
 *
 * They can be run from commad line by calling the script:
 *   profiles/btranslator/utils/run-tests.sh
 * The output of the tests is left of the directory
 * 'tests/' under the root of the drupal directory.
 *
 * The script makes a full backup (dump) of the DB
 * before running the tests, and restores it after
 * the tests.
 */

/*
   Some referencies for simpletest:
     + http://drupal.org/simpletest-tutorial-drupal7
     + http://drupal.org/simpletest
     + http://drupal.org/node/278126
     + http://drupal.org/node/265762
     + http://drupal.org/node/265828
 */

/**
 * The module simpletest_clone must be installed:
 * + http://drupal.org/project/simpletest_clone
 *
 * It overrides the setUp() of DrupalWebTestCase
 * by making a full clone of the DB available to testing,
 * instead of installing everything from scratch.
 * This provides a better testing environment and also
 * has better performance (is faster).
 * See also:
 * + http://www.opensourcery.com/blog/jonathan-hedstrom/test-driven-drupal-development-take-2
 * + http://www.opensourcery.com/blog/jonathan-hedstrom/test-driven-drupal-development
 */
// Include SimpleTestClone
module_load_include('test', 'simpletest_clone');

/**
 * l10n_feedback test cases
 */
//class L10nFeedbackTestCase extends DrupalWebTestCase {
class L10nFeedbackTestCase extends SimpleTestCloneTestCase {

  protected $profile = 'btranslator';

  public static function getInfo() {
    return array(
      'name' => 'l10n_feedback',
      'description' => 'Test the functionality of module l10n_feedback.',
      'group' => 'B-Translator',
    );
  }

  // /*
  public function setUp() {
    parent::setUp();
  }
  // */

  /*
  // Uncomment these setUp() and tearDown() function overrides
  // in order to skip the database cloning at all and use instead
  // the real database for testing. This is even faster
  // (and it doesn't need simpletest_clone).
  // See:
  // + http://www.trellon.com/content/blog/forcing-simpletest-use-live-database
  //
  public function setUp() {
    $this->setup = TRUE;
    $this->originalPrefix = $GLOBALS['db_prefix'];
  }

  public function tearDown() {
  }
  */

  /**
   * Create a test user for each role.
   */
  protected function setupUsers() {

    $this->pass("============= Creating users ================");
    $role_names = array('contributor', 'translator', 'moderator', 'administrator');
    foreach ($role_names as $role_name) {
      // Create a user and assign role $role_name
      $account = $this->drupalCreateUser();
      $role = user_role_load_by_name($role_name);
      $edit['roles'] = array($role->rid => $role->rid);
      $this->$role_name = user_save($account, $edit);
      //$this->pass("USER: " . var_export($this->$role_name, TRUE));
    }
  }

  // Test Case1
  public function testL10nFeedbackCase1() {
    $this->setupUsers();
    $this->_test_anonymous();
    $this->_test_contributor();
    $this->_test_translator();
    $this->_test_moderator();
    $this->_test_administrator();
  }

  protected function _test_anonymous() {
    $this->pass("============= Testing for the anonymous user ================");
    $this->drupalGet('translations');
    $this->assertText(t('Source text'), 'The text "Source text" appears on the translation page.');
    $this->assertFieldById('edit-next', t('Next'), 'Button "Next" exists.');
    $this->assertNoFieldById('edit-submit', t('Save'), 'No button "Save" exists.');
    $this->assertNoText(t('New translation'), 'There is no field for submitting new translations.');

    $this->clickLink(t('Next'));
    $this->assertText(t('Source text'), 'The text "Source text" appears on the translation page.');
    $this->assertText(t('Translations (sq)'), 'The Next button preserves the translation language.');

    $this->drupalGet('translations/sq/37860b7c931350449a3e4ae0f3ff3fb32153c0ee');
    $this->assertText('If only penguins could fly', 'Strings of Pingus are imported into the DB.');
    $this->clickLink(t('Show string details.'));

    $this->drupalGet('translations/fr/5598e5adfcaf50b7b8661878d19a245e129b25b2');
    $this->assertText('Repeat:', 'Strings of Pingus are imported into the DB.');
    $this->assertText('Répéter', 'French translations of Pingus are imported into the DB.');

    $this->clickLink(t('Search'));
    $this->assertText(t('Change Filter Parameters'), 'The text "Change Filter Parameters" appears on the search page.');
  }

  protected function _test_signedin_user($account) {
    // login with the given user account
    $this->drupalLogin($account);
    global $user;
    $user = user_load($account->uid);

    $this->drupalGet('translations');
    $this->assertText(t('Source text'), 'The text "Source text" appears on the translation page.');
    $this->assertFieldById('edit-next', t('Next'), 'Button "Next" exists.');
    $this->assertFieldById('edit-submit', t('Save'), 'Button "Save" exists.');
    $this->assertText(t('New translation'), 'There is a field for submitting new translations.');

  }

  protected function _test_contributor() {
    $this->pass("============= Testing for a user with role contributor ================");

    // test use-cases of the signed-in user
    $this->_test_signedin_user($this->contributor);

    // logout user contributor
    $this->drupalLogout();
  }

  protected function _test_translator() {
    $this->pass("============= Testing for a user with role translator ================");

    // test use-cases of the signed-in user
    $this->_test_signedin_user($this->translator);

    // logout user contributor
    $this->drupalLogout();
  }

  protected function _test_moderator() {
    $this->pass("\n============= Testing for a user with role moderator ================\n");

    // test use-cases of the signed-in user
    $this->_test_signedin_user($this->moderator);

    // logout user
    $this->drupalLogout();
  }

  protected function _test_administrator() {
    $this->pass("============= Testing for a user with role administrator ================");

    // test use-cases of the signed-in user
    $this->_test_signedin_user($this->administrator);

    // logout user contributor
    $this->drupalLogout();
  }


  /*
  // Test Case2
  public function testL10nFeedbackCase2() {
    // nothing yet
  }
  */
}

/**
 * l10n_feedback unit testing
 */
/*
class L10nFeedbackUnitTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name' => 'l10n_feedback unit tests',
      'description' => 'Unit testing for module l10n_feedback.',
      'group' => 'l10n',
    );
  }

  function setUp() {
    //drupal_load('module', 'l10n_feedback');
    //parent::setUp();
  }

  public function testL10nFeedbackUnitTestCase1() {
    // nothing yet
  }
}
*/