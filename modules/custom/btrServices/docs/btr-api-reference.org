#+TITLE:     B-Translator API Reference
#+AUTHOR:    Dashamir Hoxha
#+EMAIL:     dashohoxha@gmail.com
##+DESCRIPTION:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:nil LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:overview toc:t ltoc:t mouse:#aadddd buttons:0 path:org-info.js
#+STYLE: <link rel="stylesheet" type="text/css" href="css/org.css" />

* report

** statistics

   General statistics (number of votes and translations) for the last
   week, month and year.

   + GET public/btr/report/statistics ::
     - lng :: language of translations

   + POST public/btr/report/statistics ::
     - lng: :: language of translations


** topcontrib

   Statistics about top contributors.

   + GET public/btr/report/topcontrib ::
     - lng :: language of translations
     - period :: period of report (last day|week|month|year)
     - size :: number of results (top contributers), between 5 and 20

   + POST public/btr/report/topcontrib ::
     - lng :: language of translations
     - period :: period of report (last day|week|month|year)
     - size :: number of results (top contributers), between 5 and 20


* translations

** get_random_sguid

   Get the sguid of a random string according to the target.

   + POST public/btr/translations/get_random_sguid ::
     - target :: Can be one of: =next | translated | untranslated=
     - lng :: Code of the language (required for translated and untranslated)
     - last_sguid :: (optional) Restricts the pool of selection to the
                     project(s) of the last reviewed sguid.


** get

   Get a string, along with its translations, votes and other details.

   + GET public/btr/translations/$sguid ::
     - sguid :: The string (globally unique) id, calculated as:
                =$sguid = sha1($string . $context)= It can also be:
                =next | translated | untranslated=.
     - lng :: The language of translations, like fr, de, etc.

   + POST public/btr/translations/get ::
     - sguid :: The string (globally unique) id, calculated as:
                =$sguid = sha1($string . $context)= It can also be:
                =next | translated | untranslated=.
     - lng :: The language of translations, like fr, de, etc.


** add

   Add a new translation to a source string.

   + POST btr/translations/add ::
     - sguid ::
	 The string ID for which a new translation should be added.
     - lng ::
	 The language (code) of the new translation.
     - translation ::
	 The new translation as a string. If the string has plural
	 version(s) as well, they are concatenated with NULL bytes ("\0")
	 between them.


** vote

   Add a vote for the given translation.

   + POST btr/translations/vote ::
     - tguid :: ID of the translation


** del

   Delete a translation

   + POST btr/translations/del ::
     - tguid :: ID of the translation


** del_vote

   Delete a vote from the given translation.

   + POST btr/translations/del_vote ::
     - tguid :: ID of the translation


** search

   Search strings and translations using various filters.

   + GET public/btr/translations :: This provides the same
         functionality and has the same parameters as the *search*
         operation.  The only difference is that the parameters are
         provided as a GET request (in the URL), whereas the
         parameters of 'search' are provided as a POST
         request. Sometimes this may be more convenient.

   + POST public/btr/translations/search ::
     - lng ::
         The language of translations.
     - limit ::
         The number of results to be returned (min: 5, max: 50).
     - words ::
         Words to be searched for.
     - sguid ::
         If the /words/ is empty and there is a /sguid/ then the
         words of this string are used for searching.
     - mode ::
         Search mode. Can be one of:
         - natural-strings :       Natural search on strings (default).
         - natural-translations :  Natural search on translations.
         - boolean-strings :       Boolean search on strings.
         - boolean-translations :  Boolean search on translations.
     - page ::
         Page of results to be displayed.
     - project ::
         Limit search only to this project
     - origin ::
         Limit search only to the projects of this origin.
     - only_mine :: (boolean)
         Limit search only to the strings touched (translated or voted)
         by the current user.
     - translated_by ::
         Limit search by the author of translations
         (can be used only by admins).
     - voted_by ::
         Limit search by a voter (can be used only by admins).
     - date_filter ::
         Which date to filter (used only by admins). Can be one of:
         - strings :       Filter Strings By Date
         - translations :  Filter Translations By Date (default)
         - votes :         Filter Votes By Date
     - from_date :: (YYYY-MM-DD)
         Takes the current date by default.
     - to_date :: (YYYY-MM-DD)
         Takes the current date by default.


** submit

   Submit multiple actions at once.

   + POST btr/translations/submit ::
         Array of actions. Each action is an associated array
	 that contains the items:
	 - action ::
	     The action to be done: =add | vote | del | del_vote=
	 - params ::
	     Associative array of the needed parameters for this action.


* misc

  + GET translations/rss-feed/$lng[/$origin[/$project]] :: Return a
    RSS feed of the latest translations for the given language (origin
    and project are optional).

    Examples:
    #+BEGIN_EXAMPLE
    curl -k 'https://l10n.org.al/translations/rss-feed'
    curl -k 'https://l10n.org.al/translations/rss-feed/sq'
    curl -k 'https://l10n.org.al/translations/rss-feed/sq/LibreOffice'
    curl -k 'https://l10n.org.al/translations/rss-feed/sq/LibreOffice/sw'
    #+END_EXAMPLE

  + GET translations/twitter/$lng :: Return a random string and its
    translations in a suitable form for the twitter (truncated to 100
    characters).
    - lng :: Language of translations.

    Examples:
    #+BEGIN_EXAMPLE
    curl -k 'https://l10n.org.al/translations/twitter/sq'
    curl -k 'https://l10n.org.al/translations/twitter/sq/LibreOffice'
    curl -k 'https://l10n.org.al/translations/twitter/sq/LibreOffice/sw'
    #+END_EXAMPLE



  + GET translations/$lng/$sguid :: Returns the details of a string
    and its translations.  If the request header =Accept:
    application/json= is set, then the output will be in JSON
    (otherwise it will be an HTML page). The parameter /$sguid/ can
    also be one of =next | translated | untranslated=.

    Example:
    #+BEGIN_EXAMPLE
    curl -k -H 'Accept: application/json' \
      'https://dev.l10n.org.al/translations/sq/ee178b82f7ff3b5fb48537b834db673b42d48556'
    #+END_EXAMPLE

  + GET translations/search :: Search strings and translations using
    various filters.  If the request header =Accept: application/json=
    is set, then the output will be in JSON (otherwise it will be an
    HTML page). It gets the same parameters as =GET public/btr/translations=

    Example:
    #+BEGIN_EXAMPLE
    curl -k -H 'Accept: application/json' \
	 'https://dev.l10n.org.al/translations/search?lng=sq&words=space'
    #+END_EXAMPLE



  + GET translations/languages :: Return a json list of languages
    installed on the system and their details.

    Example:
    #+BEGIN_EXAMPLE
    curl -k 'https://dev.l10n.org.al/translations/languages'
    #+END_EXAMPLE

  + GET translations/project/list/$origin/$project[/$format] ::
    Return a plain-text list of all the imported projects, filtered
    by the given origin/project. Variables $origin and $project can
    contain '*', which is replaced by '%' (for LIKE matches).  If
    $project=='-' then only a list of 'origin' is outputed, otherwise
    a list of 'origin/project'.  The third variable can be JSON or
    TEXT (default).

    Example:
    #+BEGIN_EXAMPLE
    curl -k 'https://l10n.org.al/translations/project/list/*/-'
    curl -k 'https://l10n.org.al/translations/project/list/*/-/json'
    curl -k 'https://l10n.org.al/translations/project/list/LibreOffice/s*'
    curl -k 'https://l10n.org.al/translations/project/list/LibreOffice'
    curl -k 'https://l10n.org.al/translations/project/list/*/nautil*'
    curl -k 'https://l10n.org.al/translations/project/list/*/*/json'
    curl -k 'https://l10n.org.al/translations/project/list'
    #+END_EXAMPLE


  + GET translations/string_details/$sguid :: Return string context, a
    list of related projects (where the string appears), etc.  This
    callback is invoked from JavaScript and is used as an AJAX
    provider.
    - sguid :: Id of the string.

    Example:
    #+BEGIN_EXAMPLE
    curl -k 'https://l10n.org.al/translations/string_details/2a430d7b80a053872c2c79a9e3ce2e69dbc37866'
    #+END_EXAMPLE

  + GET translations/autocomplete/project/$str :: Retrieve a JSON list
    of autocomplete suggestions for projects.
    - str :: Beginning of a project name.

    Example:
    #+BEGIN_EXAMPLE
    curl -k 'https://l10n.org.al/translations/autocomplete/project/kd'
    #+END_EXAMPLE

  + GET translations/autocomplete/origin/$str :: Retrieve a JSON list
    of autocomplete suggestions for origins of projects.
    - str :: Beginning of an origin.

    Example:
    #+BEGIN_EXAMPLE
    curl -k 'https://l10n.org.al/translations/autocomplete/origin/G'
    #+END_EXAMPLE

  + GET translations/autocomplete/user/$str :: Retrieve a JSON list of
    autocomplete suggestions for users.
    - str :: Beginning of a user name.

    Example:
    #+BEGIN_EXAMPLE
    curl -k 'https://l10n.org.al/translations/autocomplete/user/d'
    #+END_EXAMPLE


  + GET/POST translations/project/export :: Return a PO file as
    plain-text. Does not allow concurrent exports because they may
    affect the performance of the server.  Parameters are received
    from the request (either GET or POST). They are:
    - origin ::
	Origin of the project (ubuntu, GNOME, KDE, etc.)
    - project ::
	The name of the project to be exported.
    - tplname ::
	The name of the PO template.
    - lng ::
	Translation to be exported (de, fr, sq, en_GB, etc.)
    - export_mode ::
	Mode of export: =most_voted | preferred | original=

	Default is =most_voted= which exports the most voted
	translations and suggestions.

	The export mode =original= exports the translations of the
	original file that was imported (useful for making diffs).

	The export mode =preferred= gives priority to translations
	that are voted by a certain user or a group of users. It
	requires an additional argument (preferred_voters) to specify
	the user (or a list of users) whose translations are
	preferred.
   - preferred_voters ::
	Comma separated list of email addresses of preferred voters.

    Examples:
    #+BEGIN_EXAMPLE
    curl -k 'https://dev.l10n.org.al/translations/project/export?origin=test&project=kturtle&lng=sq' > test.po
    curl -k https://dev.l10n.org.al/translations/project/export \
         -d 'origin=test&project=kturtle&lng=sq&export_mode=original' > test.po
    curl -k https://dev.l10n.org.al/translations/project/export \
         -d origin=test -d project=kturtle -d lng=sq \
         -d preferred_voters=email1@example.com,email2@example.com \
         -d export_mode=preferred > test.po
    #+END_EXAMPLE

  + GET translations/project/export_tgz/$origin/$project/$lng ::
    Return an archive of PO files for a given origin/project/lng
    (usefull for projects that have many POT files.)  If
    project=='all', then all the projects of the given origin will be
    exported (it usually takes a very long time).

  + GET translations/project/diff/$origin/$project/$lng[/$nr[/$ediff]] ::
    Return as plain-text the diff of the PO file for a given
    origin/project/lng, which contains the latest most-voted
    suggestions since the last snapshot.  It gets the parameters
    origin/project/lng[/nr[/ediff]].  If the parameter 'nr' is '-', it
    returns the latest most-voted suggestions since the last snapshot.
    If the parameter 'nr' is missing, it returns a list of the saved
    diffs instead.

