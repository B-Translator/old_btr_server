<?php
/**
 * @file
 * Module file for btrCore.
 */

require_once(dirname(__FILE__) . '/btrCore.menu.inc');
require_once(dirname(__FILE__) . '/btrCore.cron.inc');
require_once(dirname(__FILE__) . '/includes/functions.inc');

/**
 * Implements hook_help().
 */
                               /*
function btrCore_help($path, $args) {
  switch($path)
    {
      case 'translations/get':
        $help = t('Get translation suggestions for a given string.');
        break;

      case 'translations/vote':
        $help = t('Vote the best translation for a string, or suggest a better translation.');
        break;
    }

  return $help;
}
                               */


/**
 * Implementation of hook_permission().
 */
function btrCore_permission() {
  return array(
    'btranslator-vote' => array(
      'title' => t('Vote translations.'),
      'description' => t('Can submit votes (or likes) for translation suggestions.'),
    ),
    'btranslator-suggest' => array(
      'title' => t('Suggest new translations.'),
      'description' => t('Can submit new translation suggestions.'),
    ),
    'btranslator-flag' => array(
      'title' => t('Flag translations.'),
      'description' => t('Can flag translations as inaproppriate.'),
    ),
    'btranslator-import' => array(
      'title' => t('Import translation (PO) files.'),
      'description' => t('Can import to B-Translator new translation files (in the PO format).'),
    ),
    'btranslator-export' => array(
      'title' => t('Export translation files.'),
      'description' => t('Can export translations from B-Translator (either in PO format, or as diff/ediff).'),
    ),
    'btranslator-stats' => array(
      'title' => t('Statistics.'),
      'description' => t('Can access global statistics of B-Translator.'),
    ),
    'btranslator-resolve' => array(
      'title' => t('Resolve issues.'),
      'description' => t('Can resolve flag issues and other problems.'),
    ),
    'btranslator-admin' => array(
      'title' => t('Administer B-Translator.'),
      'description' => t('Can perform administration tasks for B-Translator.'),
    ),
  );
}  //  End of btrCore_permission().


/**
 * Implement hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from drupal_mail(). The goal
 * of hook_mail() is to set the message's 'subject' and 'body' properties, as
 * well as make any adjustments to the headers that are necessary.
 *
 * The $params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of drupal_mail(). So it's
 * a callback of a type, but not a hook.
 */
function btrCore_mail($key, &$message, $params) {
  switch ($key) {
    case 'notifications':
    default:
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}


/**
 * Implements hook_init().
 */
function btrCore_init() {
  // Define the database of B-Translator.
  if (isset($GLOBALS['databases']['btr_db']['default'])) {
    define('BTR_DB', 'btr_db');
  }
  else {
    define('BTR_DB', 'default');
  }
}

/**
 * Implements hook_flush_caches().
 * Add cache table names to the list of cache tables
 * that will be cleared by the Clear button on the Performance page
 * or whenever drupal_flush_all_caches is invoked.
 * Returns an array of cache table names.
 */
function btrCore_flush_caches() {
  return array('cache_btrCore');
}

/**
 * Implements hook_robotstxt().
 *
 * Called by the module robotstxt. If this module is not installed
 * then this helps to document the modifications that need to be done
 * to robots.txt
 */
function btrCore_robotstxt() {
  return array(
    '# B-Translator paths',
    'Disallow: /translations/',
    'Disallow: /?q=translations/',
    'Disallow: /fb_cb/',
    'Disallow: /?q=fb_cb/',
    'Disallow: /downloads/',
  );
}

/**
 * Implements hook_oauth2_loginprovider_userprofile_alter().
 */
function btrCore_oauth2_loginprovider_userprofile_alter(&$data) {
  // Remove uninteresting fields.
  unset($data['uuid']);
  unset($data['disqus']);
  unset($data['rdf_mapping']);

  // These fields are duplicated
  // (without 'field_' and without the deep array structure).
  unset($data['field_translation_lng']);
  unset($data['field_preferred_projects']);
  unset($data['field_order_of_strings']);
  unset($data['field_auxiliary_languages']);
  unset($data['field_translations_per_day']);
  unset($data['field_feedback_channels']);
  unset($data['field_data_sequential']);
  unset($data['data_sequential']);

  // Add to profile data the B-Translator permissions of the user.
  $data['permissions'] = _btrCore_get_btr_permissions();
}

/**
 * Return an array of the B-Translator permissions of the current user.
 */
function _btrCore_get_btr_permissions() {
  global $user;
  $perms_arr = user_role_permissions($user->roles);
  $all_perms = array();
  foreach ($perms_arr as $rid => $perms) {
    $all_perms += $perms;
  }
  $all_perms = array_keys($all_perms);
  $btr_perms = array_keys(module_invoke('btrCore', 'permission'));
  $perms = array_intersect($all_perms, $btr_perms);

  return array_values($perms);
}

/**
 * Implements hook_form_FORM_ID_alter() for user_profile_form.
 */
function btrCore_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // remove the field 'field_data_sequential' from the form
  // it is for internal usage only
  $form['field_data_sequential']['#access'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter() for user_register_form.
 */
function btrCore_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  if (!isset($_GET['app']))  return;

  // Hide some fields for the given application,
  // they will be set to prededined values.
  switch ($_GET['app']) {
    case 'fjalori.fs.al':
      $form['field_translation_lng']['#access'] = FALSE;
      $form['field_preferred_projects']['#access'] = FALSE;
      $form['field_order_of_strings']['#access'] = FALSE;
      $form['field_auxiliary_languages']['#access'] = FALSE;
      $form['field_translations_per_day']['#access'] = FALSE;
      $form['field_feedback_channels']['#access'] = FALSE;
      break;
  }
  // Register a validation callback function.
  $form['#validate'][] = 'btrCore_user_register_validate';
}

/**
 * Validation function for user_register_form.
 */
function btrCore_user_register_validate($form, &$form_state) {
  if (!isset($_GET['app']))  return;

  // Set predefined values for the given application.
  $values = &$form_state['values'];
  switch ($_GET['app']) {
    case 'fjalori.fs.al':
      $values['field_translation_lng']['und'][0]['value'] = 'sq';
      $values['field_preferred_projects']['und'][0]['value'] = 'vocabulary/ICT_sq';
  }
}

/**
 * Implements hook_hybridauth_registration_form().
 */
function btrCore_hybridauth_registration_form($data) {
  return !isset($data['translation_lng']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function btrCore_form_hybridauth_additional_info_form_alter(&$form, &$form_state, $form_id) {
  // Field translation_lng.
  $form['fset']['translation_lng'] = array(
    '#type' => 'select',
    '#title' => t('Translation Language'),
    '#description' => t('The language of translations. You will help with the translations of this language (review existing translations or submit new ones).'),
    '#options' => btr::languages_get_list(),
  );

  // $form['#validate'][] = 'btrCore_form_hybridauth_additional_info_form_validate';
  array_unshift($form['#submit'], 'btrCore_form_hybridauth_additional_info_form_submit');
}

/*function btrCore_form_hybridauth_additional_info_form_validate($form, &$form_state) {
}*/

function btrCore_form_hybridauth_additional_info_form_submit($form, &$form_state) {
  if (isset($form_state['values']['translation_lng'])) {
    $form_state['values']['data']['translation_lng'] = $form_state['values']['translation_lng'];
  }
}

/**
 * Implements hook_hybridauth_userinfo_alter().
 */
function btrCore_hybridauth_userinfo_alter(&$userinfo, $data) {
  if (array_key_exists('translation_lng', $data)) {
    $userinfo['translation_lng'] = $data['translation_lng'];
  }
}

/**
 * Include functions for debug.
 */
//require_once(dirname(__FILE__) . '/btrCore.debug.inc');
