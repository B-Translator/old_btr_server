<?php
/**
 * @file
 * Module file for btrClient.
 */

require_once(dirname(__FILE__) . '/btrClient.menu.inc');
require_once(dirname(__FILE__) . '/btrClient.blocks.inc');
require_once(dirname(__FILE__) . '/btrClient.services.inc');

/**
 * Implements hook_help().
 */
                               /*
function btrClient_help($path, $args) {
  switch($path)
    {
      case 'translations/get':
        $help = t('Get translation suggestions for a given string.');
        break;

      case 'translations/vote':
        $help = t('Vote the best translation for a string, or suggest a better translation.');
        break;
    }

  return $help;
}
                               */

/**
 * Implements hook_theme().
 */
function btrClient_theme($existing, $type, $theme, $path) {
  return array(
    'btrClient_filter_form_element' => array(
      'render element' => 'element',
    ),
    'btrClient_translate_translation' => array(
      'render element' => 'element',
    ),
    'btrClient_translate_actions' => array(
      'render element' => 'element',
    ),
    'btrClient_in_context' => array(
      'variables' => array('source' => NULL),
    ),
    'btrClient_translate_radio' => array(
      'render element' => 'element',
    ),
    'btrClient_translate_source' => array(
      'render element' => 'element',
    ),
    'btrClient_translate_translation_list' => array(
      'render element' => 'element',
    ),
    'btrClient_translate_table' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_flush_caches().
 * Add cache table names to the list of cache tables
 * that will be cleared by the Clear button on the Performance page
 * or whenever drupal_flush_all_caches is invoked.
 * Returns an array of cache table names.
 */
function btrClient_flush_caches() {
  return array('cache_btrClient');
}

/**
 * Implements hook_init().
 */
function btrClient_init() {
  // Load the public B-Translator service or the authenticated one.
  global $btr;
  if (user_is_logged_in()) {
    $btr = wsclient_service_load('btr');
  }
  else {
    $btr = wsclient_service_load('public_btr');
  }

  if (arg(0) == 'translations') {
    drupal_add_css(drupal_get_path('module', 'btrClient') . '/btrClient.css');
    // For the translation overview pages. This is used to present admin page like panels.
    drupal_add_css(drupal_get_path('module', 'system') . '/admin.css');
  }

  // Check if language is RTL
  $languages = btr_get_languages();
  $lng = arg(1);
  if (array_key_exists($lng, $languages)) {
    // Add RTL style if the current language's direction is RTL
    if ($languages[$lng]['direction'] == LANGUAGE_RTL) {
      drupal_add_css(drupal_get_path('module', 'btrClient') . '/btrClient-rtl.css');
    }
  }

  // Disable breadcrumb.
  drupal_set_breadcrumb(array());
}

/**
 * Invoked when a user has logged in through HybridAuth.
 * @param object $account
 *   User account object.
 * @param array $data
 *   HybridAuth identity data.
 */
function btrClient_hybridauth_user_login($account, $data) {
  global $btr;
  $btr = wsclient_service_load('btr');
}

/**
 * Implements hook_hybridauth_profile_alter().
 */
function btrClient_hybridauth_profile_alter($profile) {
  $btr_user = $profile['remote_profile'];
  $btr_profile = array(
    'translation_lng' => $btr_user->translation_lng,
    'string_order' => $btr_user->string_order,
    'preferred_projects' => $btr_user->preferred_projects,
    'auxiliary_languages' => $btr_user->auxiliary_languages,
    'translations_per_day' => $btr_user->translations_per_day,
    'feedback_channels' => $btr_user->feedback_channels,
    'permissions' => $btr_user->permissions,
  );
  btr_log($btr_profile);
  $_SESSION['btrClient']['btr_profile'] = $btr_profile;
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function btrClient_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // remove the field 'field_data_sequential' from the form
  // it is for internal usage only
  $form['field_data_sequential']['#access'] = FALSE;
}

/**
 * Implements hook_oauth2_login_enabled().
 */
function btrClient_oauth2_login_enabled($enabled) {
  db_update('menu_links')
    ->fields(array(
        'hidden' => ($enabled ? 1 : 0),
      ))
    ->condition('menu_name', 'user-menu')
    ->condition('link_path', 'user/login')
    ->condition('router_path', 'user/login')
    ->condition('plid', 0)
    ->condition('module', 'menu')
    ->execute();
}
