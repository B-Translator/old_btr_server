<?php
/**
 * @file btrCore.install
 * Install and update functions for the module btrCore.
 */

// get the functions for creating/deleting user preference fields and instancies
include drupal_get_path('module', 'btrCore') . '/btrCore.userprofile.inc';

/**
 * Implements hook_enable().
 */
function btrCore_enable() {
  mailsystem_set(array('btrCore' => 'MimeMailSystem'));
}

/**
 * Implements hook_disable().
 */
function btrCore_disable() {
  mailsystem_clear(array('btrCore' => 'MimeMailSystem'));
}

/**
 * Implements hook_install().
 */
function btrCore_install() {
  // create custom fields for user preferencies
  btrCore_create_userprofile_fields();

  // import some test PO files
  $path = drupal_get_path('module', 'btrCore');
  $output = shell_exec($path . '/data/install.sh');
  drupal_set_message("<xmp>$output</xmp>");
}

/**
 * Implements hook_uninstall().
 */
function btrCore_uninstall() {
  // delete the custom fields of user preferencies
  btrCore_delete_userprofile_fields();

  // delete variables that were used for this module
  $variables = array(
    'btr_voting_mode',
    'btr_translation_lng',
    'btr_preferred_projects',
    'btr_export_path',
    'btr_export_notify_admin',

    'btrCore_crontime',
  );
  foreach ($variables as $var) {
    variable_del($var);
  }
}

/**
 * Implements hook_schema().
 */
function btrCore_schema() {

  // create a cache table for this module
  $schema['cache_btrCore'] = drupal_get_schema_unprocessed('system', 'cache');

  // PO files that are imported and can be exported from the DB.
  $schema['btr_files'] = array(
    'description' => 'A PO file that is imported and can be exported from the DB.',
    'fields' => array(
      'fid' => array(
        'description' => 'Auto-increment internal identifier.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'filename' => array(
        'description' => 'The path and filename of the imported PO file.',
        'type' => 'varchar',
        'length' => '250',
        'not null' => FALSE,
      ),
      'hash' => array(
        'description' => 'The SHA1() hash of the whole file content.',
        'type' => 'char',
        'length' => '40',
        'not null' => TRUE,
      ),
      'potid' => array(
        'description' => 'Reference to the project for which this PO file is a translation.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'lng' => array(
        'description' => 'The code of the translation language.',
        'type' => 'varchar',
        'length' => '10',
        'not null' => TRUE,
      ),
      'headers' => array(
        'description' => 'Headers of the imported PO file, as a long line. Needed mainly for exporting.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'comments' => array(
        'description' => 'Translator comments of the file (above the header entry).',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'Id of the user that imported the file.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'time' => array(
        'description' => 'The date and time that the record was registered.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('fid'),
    'indexes' => array(
      'potid' => array('potid'),
      'hash' => array('hash'),
    ),
  );

  // Templates are the POT files that are imported.
  $schema['btr_templates'] = array(
    'description' => ' Templates are the POT files that are imported.',
    'fields' => array(
      'potid' => array(
        'description' => 'Auto-increment internal identifier.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'tplname' => array(
        'description' => 'The name of the POT template (to distinguish it from the other templates of the same project).',
        'type' => 'varchar',
        'length' => '50',
        'not null' => TRUE,
      ),
      'filename' => array(
        'description' => 'The path and name of the imported POT file.',
        'type' => 'varchar',
        'length' => '250',
        'not null' => FALSE,
      ),
      'pguid' => array(
        'description' => 'Reference to the project to which this PO template belongs.',
        'type' => 'char',
        'length' => '40',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Id of the user that registered the project.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'time' => array(
        'description' => 'The date and time that the project was registered.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('potid'),
  );

  // Projects are the software/applications which are translated by the PO files.
  $schema['btr_projects'] = array(
    'description' => 'A project is the software/application which is translated by',
    'fields' => array(
      'pguid' => array(
        'description' => 'Project Globally Unique ID, pguid = SHA1(CONCAT(origin,project))',
        'type' => 'char',
        'length' => '40',
        'not null' => TRUE,
        'default' => '',
      ),
      'project' => array(
        'description' => 'Project name (with the release appended if needed).',
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
      'origin' => array(
        'description' => 'The origin of the project (where does it come from).',
        'type' => 'varchar',
        'length' => '100',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'Id of the user that registered the project.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'time' => array(
        'description' => 'The date and time that the project was registered.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('pguid'),
    'indexes' => array(
      'project' => array('project'),
    ),
  );

  // Locations (lines) where a l10n string is found.
  $schema['btr_locations'] = array(
    'description' => 'Locations (lines) where a l10n string is found.',
    'fields' => array(
      'lid' => array(
        'description' => 'Internal numeric identifier of a line.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'sguid' => array(
        'description' => 'Reference to the id of the l10n string contained in this line.',
        'type' => 'char',
        'length' => '40',
        'not null' => TRUE,
      ),
      'potid' => array(
        'description' => 'Reference to the id of the template (POT) that contains this line.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'translator_comments' => array(
        'description' => 'Translator comments in the PO entry (starting with "# ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'extracted_comments' => array(
        'description' => 'Extracted comments in the PO entry (starting with "#. ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'line_references' => array(
        'description' => 'Line numbers where the sting occurs (starting with "#: ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'flags' => array(
        'description' => 'Flags of the PO entry (starting with "#, ").',
        'type' => 'varchar',
        'length' => '100',
        'not null' => FALSE,
      ),
      'previous_msgctxt' => array(
        'description' => 'Previous msgctxt in the PO entry (starting with "#| msgctxt ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'previous_msgid' => array(
        'description' => 'Previous msgid in the PO entry (starting with "#| msgid ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'previous_msgid_plural' => array(
        'description' => 'Previous msgid_plural in the PO entry (starting with "#| msgid_plural ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('lid'),
    'indexes' => array(
      'potid' => array('potid'),
      'sguid' => array('sguid'),
    ),
  );

  // Translatable strings that are extracted from projects.
  $schema['btr_strings'] = array(
    'description' => 'Translatable strings that are extracted from...',
    'fields' => array(
      'string' => array(
        'description' => 'The string to be translated: "$msgid"."\0"."$msgid_plural"',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'context' => array(
        'description' => 'The string context (msgctxt of the PO entry).',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'sguid' => array(
        'description' => 'Globally Unique ID of the string, generated as a hash of the string and context: SHA1(CONCAT(string,context)) ',
        'type' => 'char',
        'length' => '40',
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'ID of the user that inserted this string on the DB.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'time' => array(
        'description' => 'The time that this string was entered on the DB.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
      ),
      'count' => array(
        'description' => 'How often this string is encountered in all the projects. Can be useful for any heuristics that try to find out which strings should be translated first.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 1,
      ),
      'active' => array(
        'description' => 'The active/deleted status of the record.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('sguid'),
    'indexes' => array(
      'string' => array(array('string', 100)),
      'uid' => array('uid', 'time'),
    ),
  );

  // Translations/suggestions of the l10n strings.
  // For each l10n string there can be translations for different
  // languages, and more than one translation for each language.
  $schema['btr_translations'] = array(
    'description' => 'Translations/suggestions of the l10n strings. For...',
    'fields' => array(
      'sguid' => array(
        'description' => 'Reference to the id of the l10n string that is translated.',
        'type' => 'char',
        'length' => '40',
        'not null' => TRUE,
      ),
      'lng' => array(
        'description' => 'Language code (en, fr, sq_AL, etc.)',
        'type' => 'varchar',
        'length' => '5',
        'not null' => TRUE,
      ),
      'translation' => array(
        'description' => 'The (suggested) translation of the phrase.',
        'type' => 'varchar',
        'length' => '1000',
        'not null' => TRUE,
      ),
      'tguid' => array(
        'description' => 'Globally Unique ID of the translation, defined as hash: SHA1(CONCAT(translation,lng,sguid))',
        'type' => 'char',
        'length' => '40',
        'not null' => TRUE,
      ),
      'count' => array(
        'description' => 'Count of votes received so far. This can be counted on the table Votes, but for convenience is stored here as well.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 1,
      ),
      'umail' => array(
        'description' => 'The email of the user that submitted this suggestion.',
        'type' => 'varchar',
        'length' => '250',
        'not null' => TRUE,
      ),
      'ulng' => array(
        'description' => 'The translation language of the user that submitted this suggestion.',
        'type' => 'varchar',
        'length' => '5',
        'not null' => TRUE,
      ),
      'time' => array(
        'description' => 'Time when the translation was entered into the database.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
      ),
      'active' => array(
        'description' => 'The active/deleted status of the record.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('tguid'),
    'indexes' => array(
      'sguid' => array('sguid'),
      'time' => array('time'),
      'translation_text' => array('translation'),
      'umail' => array(array('umail', 20)),
    ),
  );


  // Translations that are deleted are saved on the trash table.
  $schema['btr_translations_trash'] = $schema['btr_translations'];
  $schema['btr_translations_trash']['description'] =
    'Translations that are deleted are saved on the trash table.';
  $schema['btr_translations_trash']['fields']['d_umail'] =
    array(
        'description' => 'The email of the user that deleted this translation.',
        'type' => 'varchar',
        'length' => '250',
        'not null' => TRUE,
    );
  $schema['btr_translations_trash']['fields']['d_ulng'] =
    array(
      'description' => 'The language of the user that deleted this translation.',
      'type' => 'varchar',
      'length' => '5',
      'not null' => TRUE,
    );
  $schema['btr_translations_trash']['fields']['d_time'] =
    array(
      'description' => 'Timestamp of the deletion time.',
      'type' => 'datetime',
      'mysql_type' => 'DATETIME',
      'not null' => FALSE,
    );
  $schema['btr_translations_trash']['primary key'] = array();
  $schema['btr_translations_trash']['indexes']['tguid'] = array('tguid');
  $schema['btr_translations_trash']['indexes']['d_time'] = array('d_time');
  $schema['btr_translations_trash']['indexes']['d_umail'] = array(array('d_umail', 10));


  // Votes for each translation/suggestion.
  $schema['btr_votes'] = array(
    'description' => 'Votes for each translation/suggestion.',
    'fields' => array(
      'vid' => array(
        'description' => 'Internal numeric identifier for a vote.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'tguid' => array(
        'description' => 'Reference to the id of the translation which is voted.',
        'type' => 'char',
        'length' => '40',
        'not null' => TRUE,
      ),
      'umail' => array(
        'description' => 'The email of the user that submitted this suggestion.',
        'type' => 'varchar',
        'length' => '250',
        'not null' => TRUE,
      ),
      'ulng' => array(
        'description' => 'The translation language of the user that submitted this suggestion.',
        'type' => 'varchar',
        'length' => '5',
        'not null' => TRUE,
      ),
      'time' => array(
        'description' => 'Timestamp of the voting time.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'not null' => FALSE,
      ),
      'active' => array(
        'description' => 'The active/deleted status of the record.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('vid'),
    'indexes' => array(
      'umail_ulng_tguid' => array(array('umail', 20), 'ulng', 'tguid'),
      'tguid' => array('tguid'),
      'time' => array('time'),
      'umail' => array(array('umail', 20)),
    ),
  );


  // Votes that are deleted are saved on the trash table.
  $schema['btr_votes_trash'] = $schema['btr_votes'];
  $schema['btr_votes_trash']['description'] =
    'Votes that are deleted are saved on the trash table.';
  $schema['btr_votes_trash']['fields']['vid']['type'] = 'int';
  $schema['btr_votes_trash']['fields']['d_time'] =
    array(
      'description' => 'Timestamp of the deletion time.',
      'type' => 'datetime',
      'mysql_type' => 'DATETIME',
      'not null' => FALSE,
    );
  $schema['btr_votes_trash']['primary key'] = array();
  $schema['btr_votes_trash']['indexes']['vid'] = array('vid');
  $schema['btr_votes_trash']['indexes']['d_time'] = array('d_time');


  // Users that contribute translations/suggestions/votes.
  $schema['btr_users'] = array(
    'description' => 'Users that contribute translations/suggestions/votes.',
    'fields' => array(
      'umail' => array(
        'description' => 'The email of the user.',
        'type' => 'varchar',
        'length' => '250',
        'not null' => TRUE,
      ),
      'ulng' => array(
        'description' => 'The translation language of the user.',
        'type' => 'varchar',
        'length' => '5',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The numeric identifier of the user.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Username.',
        'type' => 'varchar',
        'length' => '60',
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Disabled (0) or active (1).',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'points' => array(
        'description' => 'Number of points rewarded for his activity.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'config' => array(
        'description' => 'Serialized configuration variables.',
        'type' => 'varchar',
        'length' => '250',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('umail', 'ulng', 'uid'),
    'indexes' => array(
      'name' => array('name'),
    ),
  );

  // Snapshots are tgz archives of project-lng translation files.
  $schema['btr_snapshots'] = array(
    'description' => 'Snapshots are tgz archives of project-lng translation files.',
    'fields' => array(
      'pguid' => array(
        'description' => 'Reference to the project.',
        'type' => 'char',
        'length' => '40',
        'not null' => TRUE,
      ),
      'lng' => array(
        'description' => 'The language of translation.',
        'type' => 'varchar',
        'length' => '10',
        'not null' => TRUE,
      ),
      'snapshot' => array(
        'description' => 'The content of the tgz archive.',
        'type' => 'blob',
        'size' => 'medium',
        'mysql_type' => 'mediumblob',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Id of the user that updated the snapshot for the last time.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'time' => array(
        'description' => 'The time of last update.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('pguid', 'lng'),
  );

  // Diffs between the current state and the last snapshot.
  $schema['btr_diffs'] = array(
    'description' => 'Diffs between the current state and the last snapshot.',
    'fields' => array(
      'pguid' => array(
        'description' => 'Project Globally Unique ID, pguid = SHA1(CONCAT(origin,project))',
        'type' => 'char',
        'length' => '40',
        'not null' => TRUE,
      ),
      'lng' => array(
        'description' => 'The language of translation.',
        'type' => 'varchar',
        'length' => '5',
        'not null' => TRUE,
      ),
      'nr' => array(
        'description' => 'Incremental number of the diffs of a project-language.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'small',
        'not null' => TRUE,
      ),
      'diff' => array(
        'description' => 'The content of the unified diff (diff -u).',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'ediff' => array(
        'description' => 'The embedded diff (generated with the command poediff of pology).',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'comment' => array(
        'description' => 'Comment/description of the diff.',
        'type' => 'varchar',
        'length' => '200',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'Id of the user that inserted the diff.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'time' => array(
        'description' => 'The date and time that the diff was saved.',
        'type' => 'datetime',
        'mysql_type' => 'DATETIME',
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('pguid', 'lng', 'nr'),
  );

  return $schema;
}

