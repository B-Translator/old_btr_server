<?php
/**
 * @file l10n_suggestion.install
 * Contains install and update functions for l10n_suggestions.
 */

/**
 * Implements hook_install().
 */
function l10n_suggestions_install() {
  // nothing yet
}

/**
 * Implements hook_uninstall().
 */
function l10n_suggestions_uninstall() {
  // nothing yet
}

/**
 * Implements hook_schema().
 */
function l10n_suggestions_schema() {

  // PO files that are imported and can be exported from the DB.
  $schema['l10n_suggestions_files'] = array(
    'description' => 'A PO file that is imported and can be exported from the DB.',
    'fields' => array(
      'fid' => array(
        'description' => 'Auto-increment internal identifier.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'file' => array(
        'description' => 'The file name (and the path) of the imported file.',
        'type' => 'varchar',
        'length' => '200',
        'not null' => FALSE,
      ),
      'pid' => array(
        'description' => 'Reference to the project for which this PO file is a translation.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'lng' => array(
        'description' => 'The code of the translation language.',
        'type' => 'varchar',
        'length' => '10',
        'not null' => TRUE,
      ),
      'headers' => array(
        'description' => 'Headers of the imported PO file, as a long line. Needed mainly for exporting.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'Id of the user that imported the file.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'time' => array(
        'description' => 'The date and time that the record was registered.',
        'type' => 'datetime',
        'not null' => FALSE,
      ),
      'active' => array(
        'description' => 'The active or deleted status of the record.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('fid'),
    'indexes' => array(
      'file' => array('file'),
      'pid' => array('pid'),
    ),
  );

  // Projects are the software/applications which are translated by the PO files.
  $schema['l10n_suggestions_projects'] = array(
    'description' => 'A project is the software/application which is translated by the PO files.',
    'fields' => array(
      'pid' => array(
        'description' => 'Auto-increment internal identifier.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'project' => array(
        'description' => 'Project name (with the release appended if needed).',
        'type' => 'varchar',
        'length' => '100',
        'not null' => TRUE,
      ),
      'origin' => array(
        'description' => 'The origin of the project (where does it come from).',
        'type' => 'varchar',
        'length' => '100',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'Id of the user that registered the project.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'time' => array(
        'description' => 'The date and time that the project was registered.',
        'type' => 'datetime',
        'not null' => FALSE,
      ),
      'active' => array(
        'description' => 'The active or deleted status of the record.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('pid'),
    'indexes' => array(
      'project' => array('project'),
    ),
  );

  // Locations (lines) where a l10n string is found.
  $schema['l10n_suggestions_locations'] = array(
    'description' => 'Locations (lines) where a l10n string is found.',
    'fields' => array(
      'lid' => array(
        'description' => 'Internal numeric identifier of a line.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'sid' => array(
        'description' => 'Reference to the id of the l10n string contained in this line.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'pid' => array(
        'description' => 'Reference to the id of the project that contains this line.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'translator_comments' => array(
        'description' => 'Translator comments in the PO entry (starting with "# ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'extracted_comments' => array(
        'description' => 'Extracted comments in the PO entry (starting with "#. ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'referencies' => array(
        'description' => 'Line numbers where the sting occurs (starting with "#: ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'flags' => array(
        'description' => 'Flags of the PO entry (starting with "#, ").',
        'type' => 'varchar',
        'length' => '100',
        'not null' => FALSE,
      ),
      'previous_msgctxt' => array(
        'description' => 'Previous msgctxt in the PO entry (starting with "#| msgctxt ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'previous_msgid' => array(
        'description' => 'Previous msgid in the PO entry (starting with "#| msgid ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'previous_msgid_plural' => array(
        'description' => 'Previous msgid_plural in the PO entry (starting with "#| msgid_plural ").',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'active' => array(
        'description' => 'The active/deleted status of the record.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('lid'),
    'indexes' => array(
      'sid' => array('sid'),
    ),
  );

  // Translatable strings that are extracted from projects.
  $schema['l10n_suggestions_strings'] = array(
    'description' => 'Translatable strings that are extracted from projects.',
    'fields' => array(
      'sid' => array(
        'description' => 'Internal numeric identifier for a l10n string.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'string' => array(
        'description' => 'The string to be translated: "$msgid"."\0"."$msgid_plural"',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'context' => array(
        'description' => 'The string context (msgctxt of the PO entry).',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'hash' => array(
        'description' => 'Unique hash of the string: SHA1(CONCAT(string,context)) ',
        'type' => 'varchar',
        'length' => '40',
        'not null' => FALSE,
      ),
      'uid' => array(
        'description' => 'ID of the user that inserted this string on the DB.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'time' => array(
        'description' => 'The time that this string was entered on the DB.',
        'type' => 'datetime',
        'not null' => FALSE,
      ),
      'count' => array(
        'description' => 'How often this string is encountered in all the projects. Can be useful for any heuristics that try to find out which strings should be translated first.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 1,
      ),
      'active' => array(
        'description' => 'The active/deleted status of the record.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('sid'),
    'unique keys' => array(
      'hash' => array('hash')
    ),
    'indexes' => array(
      'string' => array(array('string', 100)),
      'string_text' => array('string'),
      'uid' => array('uid', 'time'),
    ),
  );

  // Translations/suggestions of the l10n strings.
  // For each l10n string there can be translations for different
  // languages, and more than one translation for each language.
  $schema['l10n_suggestions_translations'] = array(
    'description' => 'Translations/suggestions of the l10n strings. For...',
    'fields' => array(
      'tid' => array(
        'description' => 'Internal numeric identifier for a translation.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'sid' => array(
        'description' => 'Reference to the id of the l10n string that is translated.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'lng' => array(
        'description' => 'Language code (en, fr, sq_AL, etc.)',
        'type' => 'varchar',
        'length' => '5',
        'not null' => TRUE,
      ),
      'translation' => array(
        'description' => 'The (suggested) translation of the phrase.',
        'type' => 'varchar',
        'length' => '1000',
        'not null' => TRUE,
      ),
      'hash' => array(
        'description' => 'Unique hash of the translation: SHA1(CONCAT(translation,lng,sid))',
        'type' => 'varchar',
        'length' => '40',
        'not null' => FALSE,
      ),
      'count' => array(
        'description' => 'Count of votes received so far. This can be counted on the table Votes, but for convenience is stored here as well.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 1,
      ),
      'uid' => array(
        'description' => 'The uid of the user that initially suggested/submitted this translation.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'time' => array(
        'description' => 'Time when the translation was entered into the database.',
        'type' => 'datetime',
        'not null' => FALSE,
      ),
      'active' => array(
        'description' => 'The active/deleted status of the record.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('tid'),
    'indexes' => array(
      'hash' => array('hash'),
      'sid' => array('sid'),
      'time' => array('time'),
      'translation_text' => array('translation'),
      'uid' => array('uid'),
    ),
  );

  // Votes for each translation/suggestion.
  $schema['l10n_suggestions_votes'] = array(
    'description' => 'Votes for each translation/suggestion.',
    'fields' => array(
      'vid' => array(
        'description' => 'Internal numeric identifier for a vote.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'tid' => array(
        'description' => 'Reference to the id of the translation which is voted.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'Reference to the id of the user that submitted the vote.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'time' => array(
        'description' => 'Timestamp of the voting time.',
        'type' => 'datetime',
        'not null' => FALSE,
      ),
      'active' => array(
        'description' => 'The active/deleted status of the record.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ),
    'primary key' => array('vid'),
    'unique keys' => array(
      'tid_uid' => array('tid', 'uid')
    ),
    'indexes' => array(
      'tid' => array('tid'),
      'time' => array('time'),
      'uid' => array('uid'),
    ),
  );

  // Users that contribute translations/suggestions/votes.
  $schema['l10n_suggestions_users'] = array(
    'description' => 'Users that contribute translations/suggestions/votes.',
    'fields' => array(
      'uid' => array(
        'description' => 'The numeric identifier of the user.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'points' => array(
        'description' => 'Number of points rewarded for his activity.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'config' => array(
        'description' => 'Serialized configuration variables.',
        'type' => 'varchar',
        'length' => '250',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('uid'),
  );

  return $schema;
}
?>