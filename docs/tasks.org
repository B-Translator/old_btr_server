
This file is used to keep the project organized. It is based on the
org-mode of Emacs (http://orgmode.org/), which is a good tool for
keeping notes, project planning, tasks management, etc.

* Initial Plan

** DONE Design DB schema
   Design a propper DB schema for l10n_suggestions. In general, it is
   going to be reacher than the open-tran.eu schema, since it is going
   to keep data about votes/evaluations/promotions of different
   suggestions.

** DONE Get open-tran.eu data
   Download it from: http://open-tran.eu/dev.html

** TODO Import data
   Write a script for importing the open-tran.eu data into the
   l10n_suggestions DB (MySQL). It should:
   1. [X] dump the data from the SQLite db
   2. [X] import them into MySQL
   3. [X] rearrange them to fit the new schema requirements
   4. [ ] take care of both an initial import and an update (in the
      case of update it should be carefull not to overwrite any
      existing data)

* Functional requirements
  Describe the desired functionality of the module. Then define the
  requirements in terms of forms and other UI elements, permissions,
  etc.

** Desired Functionality

*** Open access
    Everybody will be able to use the system for the purpose of getting
    translation suggestions for a certain string, even unauthenticated
    (anonymous/guest) users (just like open-tran.eu).
    Furthermore, it should be possible to use an API (web services), so
    that these suggestions can be retrieved and used even by external
    applications.

*** Authenticated voting
    Submitting votes or new suggestions will be allowed only for the
    subscribed users (which have agreed to help and contribute). No
    contributions from anonymous/guests will be accepted.

*** Tracking votes
    Votes and suggestions will not be anonymous. For each vote or
    suggestion, the user who submitted it will be recorded and
    saved. This will allow the user to see all the strings that he has
    already voted for, and also to change any of the votes, if he later
    changed his mind. At the same time it will prevent multiple votes
    by the same user for the same translation.

*** Highly customizable
    The system will have a flexible configuration and customization
    page. This means that the user should be able to customize how much
    he would like to help and contribute. For example:
     - how many translation votes per day (an upper limit)
     - which communication means he preferes (email, facebook, google+,
       twitter, website, android app, iPhone app, etc.)
     - which projects or packages he would like to focus on (for
       example, if the user selects the package KDE, only strings that
       belong to a project on this package will be sent to him for
       review and feedback)
     - which languages he would like to use as primary and secondary
       source languages (for example a user that is not confident in
       English, may choose to use French as a primary language and
       Italian+Spanish as secondary/helper languages)
     - sequential or random selection of strings (random is the
       default, but if the user is interested in just one or a few
       projects, he may prefer to review the strings sequentially)

*** Evaluation Algorithms
    The contribution and performance of the users should be measured
    and evaluated using certain algorithms and/or heuristics. The users
    will be awarded points based on their performance. Probably some
    rewarding mechanizms can be integrated later for the top
    contributers.

*** Detailed and comprehensive reporting and statistics
    Different kinds of reports and statistics related to users,
    projects, activity etc. should be supported and provided.
    (What are exactly these reports? To be elaborated.)

*** Integration with other modules
    It should be possible to integrate with other l10n modules, like
    l10n_server, etc. When a new project is added on l10n_server, the
    strings that need to be translated can get some suggestions
    automatically from l10n_suggestions. Or they can be submitted to
    l10n_suggestions so that people can supply translation and
    suggestions for them, to vote on these suggestions, etc.

    The manager of the project on l10n_server may also adjust some
    configuration parameters related to the suggestions. For example a
    suggestion can be accepted as a correct translation only if it got
    75% of all the votes about all the suggestions, otherwise it
    should be considered as fuzzy translation and needs to be reviewed
    by the package manager.


** Required forms

*** Query interface
    On this form anybody (registered user or anonymous) can
    supply a string in English, and the system will return the
    translation suggestions related to it and the corresponding votes
    that each suggestion has.

    If the English string does not have an exact match on the DB, a
    list of similar strings will be returned and the user will choose
    toc check one of them.

    This functionality of querying suggestions will be offered also by
    a web service (XMLRPC) so that it can be used by any external
    programs.

*** Suggestion interface
    This is the form where the (authenticated) user is presented with
    an English string and several translation suggestions for it, and
    he votes on one of them as the best, or provides another
    suggestion which he thinks is better.

    The string to be translated is selected randomly, unless the user
    has selected 'sequential' on his settings. The selection of the
    string is also done so that it complies with the restrictions
    imposed by the user on his settings (for example only from a
    certain package).

    The selection of the string should be also influenced by certain
    algoriths and heuristics, which should try to give more exposure
    to the strings that need more votes. For example if a string
    already got 10 votes and another one got just 2 votes, the second
    one should be more likely to be selected.

    This interface should be able to integrate somehow with facebook,
    email, google+, etc.

*** User configuration interface
    Here the user customizes his setings, as described in the section
    'Desired Functionality' above.

*** Admin interfaces
    The admin should be able to customize the overall behaviour of the
    module, to check activity, to get reports and statistics, to
    maintain the data (backup, restore, update) etc.

*** Other modules interfaces
    In case of integration with other modules (for example with
    l10n_server), l10n_suggestions should alter their forms and
    interfaces to add the neccessary options and settings.


* Design

** DB Schema

   The DB tables and their fields:

   + Phrases :: Translatable strings and phrases that are extracted
                from projects.
     - pid : serial :: Internal numeric identifier for a phrase.
     - phrase : text :: The (English) phrase to be translated.
     - hash : binary(20) :: Will be used for a more efficient and
          reliable text comparison, searching, indexing, etc. hash =
          UNHEX(SHA1(TRIM(phrase)))
     - length : int/tiny :: Length of the phrase (inherited by
          open-trans.eu).
     - plural : int :: If this is the plural form of another phrase,
          then this field keeps the id of the singular
          phrase. Otherwise it is NULL.
     - pcount : int/tiny :: How often this phrase is encountered in
          all the projects. Can be useful for any heuristics that try
          to find out which phrases need to be translated first.

   + Translations :: Translations/suggestions of the phrases
                     (strings). For each phrase/string there can be
                     translations for different languages, and more
                     than one translation for each language.
     - tid : serial :: Internal numeric identifier for a translation.
     - pid : int :: Reference to the id of the phrase that is
                    translated.
     - lng : varchar(5) :: Language code (en, fr, sq_AL, etc.)
     - translation : varchar(1000) :: The (suggested) translation of
          the phrase.
     - hash : binary(20) :: Will be used for a more efficient and
          reliable text comparison, searching, indexing, etc. hash =
          UNHEX(SHA1(TRIM(translation)))
     - votes : int/tiny :: Count of votes received so far. This can be
          counted on the table Votes, but for convenience is stored
          here as well.
     - author : int :: id of the user that initially proposed this
                        translation

   + Votes :: Votes for each translation/suggestion.
     - vid : serial :: Internal numeric identifier for a vote.
     - tid : int :: Reference to the id of the translation which is
                    voted.
     - uid : int :: Reference to the id of the user that submitted the
                    vote.
     - vtime : datetime :: Timestamp of the voting time.

   + Users :: Users that contribute translations/suggestions/votes.
     - uid : int :: The numeric identifier of the user.
     - points : int :: Number of points rewarded for his activity.
     - config : varchar(250) :: Serialized configuration variables.

   --------------------

   + Locations :: Locations (lines) where a phrase (string) is found.
     - lid : serial :: Internal numeric identifier of a line.
     - pid : int :: Reference to the id of the phrase contained in
                    this line.
     - projectid : int :: Reference to the id of the project that
          contains this line.
     - packageid : int :: Reference to the id of the package that
          contains the project.
     - projectname : varchar(100) :: The name of the project
          containing this line.
     - flags : int :: Copied from open-trans.eu

   + Words :: Words in all the phrases.
     - wid : serial :: Internal numeric identifier for a word.
     - word : varchar(100) :: The word itself.

   + WordPhrases :: Relations between words and phrases.
     - wid : int :: Reference to the id of the word.
     - pid : int :: Reference to the id of the phrase.
     - count : int/tiny :: The count of the word in the phrase.

*** Issues
    - Store multiple plurals in different records or in one record?
    -

** UI

*** translations/get [/<hash>/<lng>/<exact>]

    An interface for suggesting translations to a phrase.  Gets as
    input
    - the phrase to be translated (textarea)
    - the language to which will be translated (listbox)
    - and whether the phrase should be matched exactly (checkbox)

    Returns a list of translation suggestions of the given phrase.

    If exact match is required, the given phrase will be matched
    exactly on the database, and if no match empty result will be
    returned.  Otherwise the best matching phrase will be found and
    its translations will be returned.

    If the phrase and language are known beforehand, then they can be
    passed as additional parameters (on the url). The phrase will be
    identified by its hash.

    This interface should be accessible by anybody.

    There should be also a corresponding XML-RPC interface, so that it
    can be accessed from external programs.

*** translations/vote [/<hash>/<lng1>,<lng2>]

    This interface will select a random phrase and will present it and
    its available translations to the user. The user will vote one of
    them as the best translation, or will provide a new translation
    that he thinks is better.

    The original phrase is usually presented in English, but
    additional languages can be presented as well, if the user is not
    confident with English. (He can select these options on the user
    settings page as well.)

    If the phrase and the additional languages are known beforehand,
    they can be passed as parameters to the menu path.

*** translations/user_settings
    The user can set:
    - the prefered source language(s)
    - how many votes a day is willing to give
    - etc.

*** translations/admin
    + translations/admin/config
    + translations/admin/dashboard
    + translations/admin/reports
    + translations/admin/stats

* Implementation Plan
  1. Implement the interface *translations/get* with forms.
  2. Implement the interface *translations/get* with xml-rpc.
  3. Implement *translations/vote* with forms and a simple random phrase
     selection.
  4. Implement a simple *translations/user_settings*
  5. Improve the random phrase selection for *translations/vote* to take
     into account the user settings.
  6. Implement a simple *translations/admin/config* interface.
  7. Make a basic *integration with facebook* (for voting).
  8. Put it online.
  9. Add a basic *email interface* (for voting).
  10. Add a *mobile interface* (or theme).
  11. Build the pages for admin dashboard, reports and stats.
  12. Integrate with projects and packages from l10n_server
  13. Add an API for external applications.
  14. Integration with google+, twitter, diaspora, etc.
  15. Android app that can be used for voting.

* Tasks
** DB
*** TODO Write scripts for updating data from open-tran.eu
    Take care to preserve the data that already exist in the DB.
** UI
*** TODO Implement the interface *translations/get* with forms.
