#+TITLE:     Documentation of the module l10n_suggestions
#+AUTHOR:    Dashamir Hoxha
#+EMAIL:     dashohoxha@gmail.com
#+DATE:      2012-01-04 Wed
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:overview toc:t ltoc:t mouse:#aadddd buttons:0 path:org-info.js
##+EXPORT_SELECT_TAGS: export
##+EXPORT_EXCLUDE_TAGS: noexport
##+LINK_UP:
##+LINK_HOME:

This file is used to keep the project organized. It is based on the
org-mode of Emacs (http://orgmode.org/), which is a good tool for
keeping notes, project planning, tasks management, etc.

* Functional requirements
  Describe the desired functionality of the module. Then define the
  requirements in terms of forms and other UI elements, permissions,
  etc.

** Desired Functionality

*** Open access
    Everybody will be able to use the system for the purpose of getting
    translation suggestions for a certain string, even unauthenticated
    (anonymous/guest) users (just like open-tran.eu).
    Furthermore, it should be possible to use an API (web services), so
    that these suggestions can be retrieved and used even by external
    applications.

*** Authenticated voting
    Submitting votes or new suggestions will be allowed only for the
    subscribed users (which have agreed to help and contribute). No
    contributions from anonymous/guests will be accepted.

*** Tracking votes
    Votes and suggestions will not be anonymous. For each vote or
    suggestion, the user who submitted it will be recorded and
    saved. This will allow the user to see all the strings that he has
    already voted for, and also to change any of the votes, if he later
    changed his mind. At the same time it will prevent multiple votes
    by the same user for the same translation.

*** Highly customizable
    The system will have a flexible configuration and customization
    page. This means that the user should be able to customize how much
    he would like to help and contribute. For example:
     - how many translation votes per day (an upper limit)
     - which communication means he preferes (email, facebook, google+,
       twitter, website, android app, iPhone app, etc.)
     - which projects or packages he would like to focus on (for
       example, if the user selects the package KDE, only strings that
       belong to a project on this package will be sent to him for
       review and feedback)
     - which languages he would like to use as primary and secondary
       source languages (for example a user that is not confident in
       English, may choose to use French as a primary language and
       Italian+Spanish as secondary/helper languages)
     - sequential or random selection of strings (random is the
       default, but if the user is interested in just one or a few
       projects, he may prefer to review the strings sequentially)

*** Evaluation Algorithms
    The contribution and performance of the users should be measured
    and evaluated using certain algorithms and/or heuristics. The users
    will be awarded points based on their performance. Probably some
    rewarding mechanizms can be integrated later for the top
    contributers.

*** Detailed and comprehensive reporting and statistics
    Different kinds of reports and statistics related to users,
    projects, activity etc. should be supported and provided.
    (What are exactly these reports? To be elaborated.)

*** Integration with other modules
    It should be possible to integrate with other l10n modules, like
    l10n_server, etc. When a new project is added on l10n_server, the
    strings that need to be translated can get some suggestions
    automatically from l10n_suggestions. Or they can be submitted to
    l10n_suggestions so that people can supply translation and
    suggestions for them, to vote on these suggestions, etc.

    The manager of the project on l10n_server may also adjust some
    configuration parameters related to the suggestions. For example a
    suggestion can be accepted as a correct translation only if it got
    75% of all the votes about all the suggestions, otherwise it
    should be considered as fuzzy translation and needs to be reviewed
    by the package manager.

*** Integration with the existing workflow of the project translations
    Project translators will continue to work with their prefered
    tools (like Pootle, Lokalize, etc.). They will also continue to
    use their prefered workflows (the way that they coordinate their
    translation work with each-other and with the project
    releases).

    This system should help them to get feedback and possibly any new
    suggestions or translations from a big crowd of the
    contributers. The system should provide means and tools for easy
    integration with the workflow of the project translations.

    For example, it should allow the translation maintainers to import
    their existing translation files (PO files), and to export
    translation files that contain the most voted translations, as
    well as new suggestions (for translated strings) or new
    translations (for untranslated strings). It should also allow them
    to get the latest changes (suggestions, translations, etc.) since
    the last time that they checked, or since a predefined moment in
    the past.

    The latest changes should be exported in a format that is easy to
    review, modify and apply (diff or ediff).


** Required forms

*** Query interface
    On this form anybody (registered user or anonymous) can
    supply a string in English, and the system will return the
    translation suggestions related to it and the corresponding votes
    that each suggestion has.

    If the English string does not have an exact match on the DB, a
    list of similar strings will be returned and the user will choose
    toc check one of them.

    This functionality of querying suggestions will be offered also by
    a web service (XMLRPC) so that it can be used by any external
    programs.

*** Suggestion interface
    This is the form where the (authenticated) user is presented with
    an English string and several translation suggestions for it, and
    he votes on one of them as the best, or provides another
    suggestion which he thinks is better.

    The string to be translated is selected randomly, unless the user
    has selected 'sequential' on his settings. The selection of the
    string is also done so that it complies with the restrictions
    imposed by the user on his settings (for example only from a
    certain package).

    The selection of the string should be also influenced by certain
    algoriths and heuristics, which should try to give more exposure
    to the strings that need more votes. For example if a string
    already got 10 votes and another one got just 2 votes, the second
    one should be more likely to be selected.

    This interface should be able to integrate somehow with facebook,
    email, google+, etc.

*** User configuration interface
    Here the user customizes his setings, as described in the section
    'Desired Functionality' above.

*** Admin interfaces
    The admin should be able to customize the overall behaviour of the
    module, to check activity, to get reports and statistics, to
    maintain the data (backup, restore, update) etc.

*** Other modules interfaces
    In case of integration with other modules (for example with
    l10n_server), l10n_suggestions should alter their forms and
    interfaces to add the neccessary options and settings.


* Design

** DB Schema

   #+CAPTION:    Tables and their relations.
   #+LABEL:      fig:db_diagram
   #+ATTR_LaTeX: width=13cm
   [[./db_diagram.png]]

   #+CAPTION:    Structure of the DB.
   #+LABEL:      fig:object_diagram_1
   #+ATTR_LaTeX: width=13cm
   [[./object_diagram_1.png]]

   #+CAPTION:    Structure of the DB.
   #+LABEL:      fig:object_diagram_2
   #+ATTR_LaTeX: width=12cm
   [[./object_diagram_2.png]]

   Files, Templates, Locations and Projects are related to the
   import/export of the PO files.

   Projects and Categories can be used to limit the scope of the
   search (and other operations).

   A project contains the translations of a certain application
   (software). A project can have several template (POT) files. A
   template file can have several PO files (one for each different
   language). Each of these PO files has many PO entries, which are
   stored in the table Locations.

   The table Locations stores only the comments, line references,
   flags, previous strings, etc. of each PO entry.

   The msgid (and msgctxt) of the entry is stored on the table
   Strings. A string can be connected to several locations, since the
   same string can be used on different projects.

   Each string can have several translations (or suggestions) in each
   language. Each translation can have many votes. Each vote is given
   by a certain user.

   The DB tables and their fields:

   + Files :: A PO file that is imported and can be exported from the
              DB.
     - fid : serial :: Auto-increment internal identifier.
     - filename : varchar(250) :: The path and filename of the
          imported PO file.
     - hash : char(40) :: The SHA1() hash of the whole file content.
     - potid : int :: Reference to the template (POT) for which this
          PO file is a translation.
     - lng : varchar(10) :: The code of the translation language.
     - headers : text :: Headers of the imported PO file, as a long
          line. Needed mainly for exporting.
     - comments : text :: Translator comments of the file (above the
          header entry). Needed mainly for exporting.
     - uid : int :: Id of the user that imported the file.
     - time : datetime :: The date and time that the record was
          registered.

   + Templates :: POT files that are imported.
     - potid : serial :: Auto-increment internal identifier.
     - tplname : varchar(50) :: The name of the POT template (to
          distinguish it from the other templates of the same
          project).
     - filename : varchar(250) :: The path and name of the imported
          POT file.
     - pguid : char(40) :: Reference to the project to which this PO
          template belongs.  it come from).
     - uid : int(11) :: Id of the user that registered the project.
     - time : datetime :: The date and time that the template was
          imported.

   + Projects :: A project is the software/application which is
                 translated by the PO files.
     - pguid : char(40) :: Project Globally Unique ID, pguid =
          SHA1(CONCAT(origin,project))
     - project : varchar(100) :: Project name (with the release
          appended if needed).
     - origin : varchar(100) :: The origin of the project (where does
          it come from).
     - uid : int(11) :: Id of the user that registered the project.
     - time : datetime :: The date and time that the project was
          registered.

   + Locations :: Locations (lines) where a l10n string is found.
     - lid : serial :: Internal numeric identifier of a line.
     - sguid : char(40) :: Reference to the id of the l10n string
          contained in this line.
     - potid : int :: Reference to the id of the template (POT) that
          contains this line.
     - translator_comments : varchar(500) :: Translator comments in
          the PO entry (starting with "# ").
     - extracted_comments : varchar(500) :: Extracted comments in the
          PO entry (starting with "#. ").
     - line_references : varchar(500) :: Line numbers where the sting
          occurs (starting with "#: ").
     - flags : varchar(100) :: Flags of the PO entry (starting with
          "#, ").
     - previous_msgctxt : varchar(500) :: Previous msgctxt in the PO
          entry (starting with "#| msgctxt ").
     - previous_msgid : varchar(500) :: Previous msgid in the PO entry
          (starting with "#| msgid ").
     - previous_msgid_plural : varchar(500) :: Previous msgid_plural
          in the PO entry (starting with "#| msgid_plural ").

   + Strings :: Translatable strings that are extracted from projects.
     - string : text :: The string to be translated:
          CONCAT(msgid,CHAR(0),msgid_plural)
     - context : varchar(500) :: The string context (msgctxt of the PO
          entry).
     - sguid : char(40) :: Globally Unique ID of the string, as hash
          of the string and context: SHA1(CONCAT(string,context))
     - uid : int :: ID of the user that inserted this string
          on the DB.
     - time : datetime :: The time that this string was
          entered on the DB.
     - count : int/tiny :: How often this string is encountered in
          all the projects. Can be useful for any heuristics that try
          to find out which strings should be translated first.
     - active : boolean :: The active/deleted status of the record.

   + Translations :: Translations/suggestions of the l10n strings.
          For each string there can be translations for different
          languages, and more than one translation for each language.
     - sguid : int :: Reference to the id of the l10n string that is
          translated.
     - lng : varchar(5) :: Language code (en, fr, sq_AL, etc.)
     - translation : varchar(1000) :: The (suggested) translation of
          the string.
     - tguid : char(40) :: Globally Unique ID of the translation,
          defined as the hash: SHA1(CONCAT(translation,lng,sguid))
     - count : int/tiny :: Count of votes received so far. This can be
          counted on the table Votes, but for convenience is stored
          here as well.
     - uid : int :: id of the user that initially suggested/submitted
          this translation
     - time : datetime :: Time that the translation was
          entered into the database.
     - active : boolean :: The active or deleted status of the record.

   + Votes :: Votes for each translation/suggestion.
     - vid : serial :: Internal numeric identifier for a vote.
     - tguid : char(40) :: Reference to the id of the translation
          which is voted.
     - uid : int :: Reference to the id of the user that submitted the
          vote.
     - time : datetime :: Timestamp of the voting time.
     - active : boolean :: The active or deleted status of the record.

   + Users :: Users that contribute translations/suggestions/votes.
     - uid : int :: The numeric identifier of the user.
     - points : int :: Number of points rewarded for his activity.
     - config : varchar(250) :: Serialized configuration variables.

   + Snapshots :: Snapshots are tgz archives of project-lng
                  translation files.
     - pguid : char(40) :: Reference to the project.
     - lng : varchar(10) :: The language of translation.
     - snapshot : mediumblob :: The content of the tgz archive.
     - uid : int :: Id of the user that updated the snapshot for the
                    last time.
     - time : datetime :: The time of last update.

   + Diffs :: Diffs between the current state and the last snapshot.
     - pguid : char(40) :: Reference to the project.
     - lng : varchar(10) :: The language of translation.
     - nr : smallint :: Incremental number of the diffs of a
                        project-language.
     - diff : text :: The content of the unified diff (diff -u).
     - ediff : text :: The embedded diff (generated with the command
                       poediff of pology).
     - comment : varchar(200) :: Comment/description of the diff.
     - uid : int :: Id of the user that inserted the diff.
     - time : datetime :: The date and time that the diff was saved.


** UI

*** translations/get/<lng>/<sguid>

    An interface for suggesting translations to a string.  Gets as
    input
    - the language code to which will be translated
    - the hash of the string to be translated

    Returns a list of translation suggestions of the given string.
    This interface should be accessible by anybody.
    There should be also a corresponding XML-RPC interface, so that it
    can be accessed from external programs.

*** translations/search?lng=..&limit=..&mode=..&words=..

    Displays a list of strings and the corresponding suggestions, which
    match some filter conditions. Filter conditions can be modified on
    the interface. Search can be done by the content of the strings and
    suggestions, and can be limited in scope by the project, by the author
    of suggestions, by the submition date, etc.

    From the displayed list, it is also possible to view details (for
    string or suggestion), to submit votes, etc.

*** translations/vote

    This interface will select a random string and will present it and
    its available translations to the user. The user will vote one of
    them as the best translation, or will provide a new translation
    that he thinks is better.

    The original string is usually presented in English, but
    additional languages can be presented as well, if the user is not
    confident with English. (He can select these options on the user
    settings page as well.)

*** translations/user_settings
    The user can set:
    - the prefered source language(s)
    - how many votes a day is willing to give
    - etc.

*** translations/admin
    + translations/admin/config
    + translations/admin/dashboard
    + translations/admin/reports
    + translations/admin/stats

** API

*** Import/Export projects and PO files
    There are two steps for importing a projects' translations.  The
    first step is to import the POT (template) file of the project,
    and the second step is to import the PO (translation) file for
    each language that is supported.

**** Shell

     + pot_import.php origin project tplname file.pot

       Import a POT (template) file of a project

     + po_import.php origin project tplname lng file.po

       Import a PO (translation) file of a project-language.

     + po_export.php origin project tplname lng [file.po]

       Export a PO (translation) file of a project-language.

     + export_tgz.sh origin project lng [output_dir]

       Export all the PO (translation) files of a project-language.

     + project_list.sh [origin [project]]

       Output a list of imported projects.

**** Drush
     + pot-import
     + po-import
     + po-export
     + po-export-tgz
     + project-list

**** REST
     + translations/project/list ([/origin[/project[/format]]])
     + translations/project/export (/origin/project/language)
     + translations/project/export_tgz (/origin/project/language)

*** Making snapshots and getting diffs
    A snapshot is an export of the PO files of a project-language.  A
    project has a snapshot for each language.  A diff is the
    difference between a snapshot and the last one.  The diffs are
    sequentially numbered and they keep the history of changes.

**** Shell
     + snapshot.sh origin project lng
       Export the translations of a project-language.
       Make the diff with the last snapshot and store the diff in DB.
       Store the snapshot in the DB (replacing the old one).
**** REST
     + translations/project/diff (/origin/project/lng[/nr[/ediff]])
       Return the diff/ediff of the PO files for a given origin/project/lng/nr.
       If the parameter 'nr' is '-', it returns the latest most-voted
       suggestions since the last snapshot.
       If the parameter 'nr' is missing, it returns a list of the
       saved diffs instead.


* Implementation Plan
  1. [X] Make *voting* work (without permissions, user setting, admin
     config, etc.)
  2. [ ] Release an initial drupal package and prepare a test/demo
     site.
  3. [ ] Add *admin config*, *user settings*, *permissions*,
     permission checking, etc.
  4. [ ] Make a basic *integration with facebook* (for voting).
  5. [ ] Put it online.
  6. [ ] Add a basic *email interface* (for voting).
  7. [ ] Add a *mobile interface* (or theme).
  8. [ ] Build the pages for admin dashboard, reports and stats.
  9. [ ] Integrate with projects and packages from l10n_server
  10. [ ] Add an API for external applications.
  11. [ ] Integration with google+, twitter, diaspora, etc.
  12. [ ] Android app that can be used for voting.

* Tasks

** DB

*** DONE Make ID of projects guid (because they can be used in user prefs)
*** In the table of strings, add a reference to the previous (deprecated) string.

** UI

*** List of *string-->translations*
    + Define and implement suitable access rights.
    + Some of the advanced filtering options should be available
      only if the user has propper access rights.
    + Some editing options should be available only if the user has
      propper access rights.
    + For each suggestion, the admin (or moderators) should be able to apply
      additional actions (for example remove the suggestion).

    + For each l10n string, display in which projects it occurs
      (related locations), etc.
    + For each l10n string, display also the corresponding translations
      (best suggestions) in auxiliary (helper) languages. For example,
      besides the original l10n string (in English), the French and German
      translations may be displayed as well, if these are selected on
      the display options of the filter.

    + For each suggestion, add a Like (or +1) button. When it is clicked,
      the vote is submitted through an AJAX call. The voted (or liked,
      or +1'd) suggestion should be visibly distinguished from the rest.
    + For each suggestion, display details like: suggested by, suggested
      when, number of votes, some of the latest voters (and all the voters
      when clicked).
    + For each suggestion add a Flag (or -1) button. A suggestion is flagged
      when it is totally irrelevant to the string, or is spam, or is abusive, etc.
      In general, when a suggestion is flagged, it is something that should be
      removed. When flagging a suggestion, a reason/explanation may be given as
      well. When a suggestion is flagged, it has to be reviwed and removed
      by an admin/moderator. The admin may also take some action on the user that
      submitted the offending suggestion (or on the user that submitted the flag,
      if the suggestion is ok).

    + Voting mode can be 'single' or 'multiple', and it can be selected by admin
      (during installation). On mode 'single' at most one vote per string is allowed.
      On mode 'multiple' at most one vote for translation is allowed (user can
      approve more than one translation for the same string).
    + For the 'multiple' mode, an Unlike button should be available as well (in order
      to change the voting at any time).
    + When the votes are changed, the old (removed) votes should be stored on
      an archive table, in order to keep the history of changing votes as well.


*** TODO XML-RPC interface
    Or some other web-service (API) interface.

** Misc
   - Start with simple tests (l10n_suggestions.test)
   - Improve instalation.
   - Make an initial package.
*** Add in l10n-sq.org a page for each project which can be liked, +1-d, etc.
*** DONE Convert to PO and import the translation files of Firefox, Mozilla, Thunderbird, etc.
*** DONE Import LibreOffice.
*** DONE Add origin on the search filter.
*** DONE Show related projects.
*** Add export_tgz as a drush command.
*** DONE Export in format diff/ediff.
*** DONE Use short url on the emails sent by cron.
*** Send full html pages by email.
*** Use GoogleTranslate API to make an initial suggestion for strings with no translation.
    It has become commercial. Cannot be done.
*** Improve the look of number of votes.


* Notes

** How to create TAGS for Emacs

   find . -type f | etags -
   find . -type f \( -name "*.module" -o -name "*.install" -o -name "*.inc" \) | etags -a --language=php -

   See: http://drupal.org/node/59868

** Fine-Tuning MySQL Full-Text Search

   http://dev.mysql.com/doc/refman/5.0/en/fulltext-fine-tuning.html
   http://dev.mysql.com/doc/refman/5.0/en/fulltext-search.html

   We want to index even short words and to disable stopword filtering.

   1. Edit /etc/mysql/my.cnf and set:

      [mysqld]
      ft_min_word_len = 1
      ft_stopword_file = ''

      [isamchk]
      ft_min_word_len = 1
      ft_stopword_file = ''

   2. Restart the server: service mysql restart
   3. Drop and recreate fulltext indexes.

** How to use simple REST API for exporting projects

*** List:
    wget --no-check-certificate -O list.txt https://l10n-sq.org/translations/project/list
    cat list.txt
    wget --no-check-certificate -O list.txt https://l10n-sq.org/translations/project/list/GNOME
    wget --no-check-certificate -O list.txt https://l10n-sq.org/translations/project/list/GNOME/a*
    wget --no-check-certificate -O list.txt https://l10n-sq.org/translations/project/list/*/kturtle
    wget --no-check-certificate -O list.txt https://l10n-sq.org/translations/project/list/*/kturtle/json
    wget --no-check-certificate -O list.txt https://l10n-sq.org/translations/project/list/*/-
    wget --no-check-certificate -O list.txt https://l10n-sq.org/translations/project/list/*/*turtle*/text

*** Export:
    wget --no-check-certificate -O test1.po https://l10n-sq.org/translations/project/export/KDE/kturtle/sq
    vim test1.po

*** LibreOffice:
    + List:
      wget --no-check-certificate -O list.txt \
             https://l10n-sq.org/translations/project/list/LibreOffice
      cat list.txt

    + Export:
      wget --no-check-certificate -O LibreOffice-sw-fr.tgz \
             https://l10n-sq.org/translations/project/export_tgz/LibreOffice/sw/fr
      tar tvfz LibreOffice-sw-fr.tgz
      tar xfz LibreOffice-sw-fr.tgz

    + Export all the projects:
      wget --no-check-certificate -O LibreOffice-all-fr.tgz \
             https://l10n-sq.org/translations/project/export_tgz/LibreOffice/all/fr
      tar tvfz LibreOffice-all-fr.tgz
      tar xfz LibreOffice-all-fr.tgz

*** Mozilla:
    + List:
      wget --no-check-certificate -O list.txt \
             https://l10n-sq.org/translations/project/list/Mozilla
      cat list.txt

    + Export:
      wget --no-check-certificate -O Mozilla-browser-fr.tgz \
             https://l10n-sq.org/translations/project/export_tgz/Mozilla/browser/fr
      tar tvfz Mozilla-browser-fr.tgz
      tar xfz Mozilla-browser-fr.tgz

    + Export all the projects:
      wget --no-check-certificate -O Mozilla-all-fr.tgz \
             https://l10n-sq.org/translations/project/export_tgz/Mozilla/all/fr
      tar tvfz Mozilla-all-fr.tgz
      tar xfz Mozilla-all-fr.tgz


** How to use simple REST API to get diffs

*** Get a list of diffs:
    wget -q --no-check-certificate -O list.txt https://test.l10n-sq.org/translations/project/diff/Mozilla/browser/sq ; cat list.txt
    wget -q --no-check-certificate -O list.txt https://test.l10n-sq.org/translations/project/diff/LibreOffice/sw/sq ; cat list.txt
    wget -q --no-check-certificate -O list.txt https://test.l10n-sq.org/translations/project/diff/KDE/kdelibs/sq ; cat list.txt
    wget -q --no-check-certificate -O list.txt https://test.l10n-sq.org/translations/project/diff/ubuntu/pingus/sq ; cat list.txt

*** Get a specific diff:
    wget -q --no-check-certificate -O Mozilla-browser-sq.2.diff https://test.l10n-sq.org/translations/project/diff/Mozilla/browser/sq/2
    wget -q --no-check-certificate -O Mozilla-browser-sq.2.ediff https://test.l10n-sq.org/translations/project/diff/Mozilla/browser/sq/2/ediff
    wget -q --no-check-certificate -O LibreOffice-sw-sq.2.diff https://test.l10n-sq.org/translations/project/diff/LibreOffice/sw/sq/2
    wget -q --no-check-certificate -O LibreOffice-sw-sq.2.ediff https://test.l10n-sq.org/translations/project/diff/LibreOffice/sw/sq/2/ediff
    wget -q --no-check-certificate -O KDE-kdelibs-sq.2.diff https://test.l10n-sq.org/translations/project/diff/KDE/kdelibs/sq/2
    wget -q --no-check-certificate -O KDE-kdelibs-sq.2.ediff https://test.l10n-sq.org/translations/project/diff/KDE/kdelibs/sq/2/ediff


*** Get the current diff:
    This is the diff between the current state and the last snapshot.
    It is not stored yet in the DB (it will be stored if we get
    another snapshot).

    wget -q --no-check-certificate -O Mozilla-browser-sq.current.diff https://test.l10n-sq.org/translations/project/diff/Mozilla/browser/sq/-
    wget -q --no-check-certificate -O Mozilla-browser-sq.current.ediff https://test.l10n-sq.org/translations/project/diff/Mozilla/browser/sq/-/ediff
    wget -q --no-check-certificate -O LibreOffice-sw-sq.current.diff https://test.l10n-sq.org/translations/project/diff/LibreOffice/sw/sq/-
    wget -q --no-check-certificate -O LibreOffice-sw-sq.current.ediff https://test.l10n-sq.org/translations/project/diff/LibreOffice/sw/sq/-/ediff
    wget -q --no-check-certificate -O KDE-kdelibs-sq.current.diff https://test.l10n-sq.org/translations/project/diff/KDE/kdelibs/sq/-
    wget -q --no-check-certificate -O KDE-kdelibs-sq.current.ediff https://test.l10n-sq.org/translations/project/diff/KDE/kdelibs/sq/-/ediff

** Misc

   + Field sguid:char(40) on strings, locations and translations must
     be of the same character set, otherwise mysql will not use the
     index (primary key) on queries. The same for the field tguid.

   + Crontab entry:
     0 4 * * *  wget -O - -q -t 1 --no-check-certificate https://test.l10n-sq.org/cron.php?cron_key=YVVQ7X8AmcbpDYEF_NGXISgbC-5z7_pOvxpjYEm2B_M
