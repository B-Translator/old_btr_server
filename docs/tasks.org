#+TITLE:     Tasks
#+AUTHOR:    Dashamir Hoxha
#+EMAIL:     dashohoxha@gmail.com
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:overview toc:t ltoc:t mouse:#aadddd buttons:0 path:org-info.js

* Implementation Plan
  1. [X] Make *voting* work (without permissions, user setting, admin
     config, etc.)
  2. [X] Install a test/demo site.
  3. [X] Add *admin config*, *user settings*, *permissions*,
     permission checking, etc.
  4. [+] Improve the *integration with facebook* (for voting).
  5. [X] Put it online.
  6. [+] Improve the *email interface* (for voting).
  7. [ ] Add a *mobile interface* (or theme).
  8. [ ] Build the pages for admin dashboard, reports and stats.
  9. [ ] Add an API for external applications.
  10. [ ] Integration with google+, twitter, diaspora, etc.
  11. [ ] Android app that can be used for voting.

* Tasks

** UI

*** List of *string-->translations*
    + For each l10n string, display also the corresponding translations
      (best suggestions) in auxiliary (helper) languages. For example,
      besides the original l10n string (in English), the French and German
      translations may be displayed as well, if these are selected on
      the display options of the filter.

    + For each suggestion, add a Like (or +1) button. When it is clicked,
      the vote is submitted through an AJAX call. The voted (or liked,
      or +1'd) suggestion should be visibly distinguished from the rest.
    + For each suggestion add a Flag (or -1) button. A suggestion is flagged
      when it is totally irrelevant to the string, or is spam, or is abusive, etc.
      In general, when a suggestion is flagged, it is something that should be
      removed. When flagging a suggestion, a reason/explanation may be given as
      well. When a suggestion is flagged, it has to be reviwed and removed
      by an admin/moderator. The admin may also take some action on the user that
      submitted the offending suggestion (or on the user that submitted the flag,
      if the suggestion is ok).

    + Voting mode can be 'single' or 'multiple', and it can be selected by admin
      (during installation). On mode 'single' at most one vote per string is allowed.
      On mode 'multiple' at most one vote for translation is allowed (user can
      approve more than one translation for the same string).
    + For the 'multiple' mode, an Unlike button should be available as well (in order
      to change the voting at any time).

** Workflow

** API

   Build an API/web-service that totally separates the database from
   the interface. Everything should be done through the
   API/web-service.

*** XML-RPC interface
    Or some other web-service (API) interface.

*** Split the module l10n_feedback into server and client
    These two should communicate only through the API/web-service.

** Integration with Facebook
*** For each translation review add a button for posting it on FB as a poll.
*** When a FB user votes or leaves a comment, update his status.


** Misc

*** POSTPONED Start with simple tests (l10n_feedback.test)
    Status: Already started, but it needs some work to define
            more tests, and actually it is not so useful,
            or important, or urgent. Probably it can become
            more important when there will be more than one
            developers.

*** Improve the look of number of votes.

*** Try to use on l10n.org.al the theme sky or some other suitable theme.
    Try to configure a responsive layout (which changes automatically
    for different screen sizes).

*** Send out HTML notification emails.
    Replace one-time-login with one-time-submittion on the
    notification emails

*** Improve the website (homepage) of the project on GitHub.
*** Create a page on Google+ for l10n-sq and btranslator.
*** Add in l10n.org.al a page for each project which can be liked, +1-d, etc.
    Update: A content type for projects has been created, but more work
    needs to be done in order to make it usable.

*** Separate the display interface from the database logic with a web-server API.

*** Upgrade the server on rackspace
    From 512MB RAM and 20GB HDD, to 1024MB RAM and 40GB HDD.
    Need to find some funds or sponsors, to support this.
    Note: Installation of NGINX has improved the performance
          for the time being, so this can be postponed.

*** DONE Enable exporting of diffs
*** DONE Make nightly exports of the active projects
    These are ready for download by everyone, without making
    an export request first. But they export only the most_voted
    translations.

*** Generate code documentation by phpDocu and doxygen.
*** Use modules: views, pannels, views_slideshow, etc.
    Try also: Organic Groups (for project pages), Display Suite,
    Entity View Attach, Entity Cache, Features, etc.

*** Publish/export incremental dumps of the database
    Maybe it should be a synch API which allows different instances of
    B-Translator to synchronize with each-other, according to the
    rules defined and agreed by the administrators.

*** Context information about the strings
    - Internal link to translations into other auxiliary languages.
    - External link to google.com, which tries to get more details
      about the context in which a string is used.
    - External link to open-trans.eu
    - Other external links (related to the projects to which the
      string appears)
      + transvision.mozfr.org
    - Links to any related tearms from vocabulary.

*** Publish Disqus comments to twitter account @l10n_sq

*** DONE Create a dictionary/thesaurus with the most interesting terms and translations
    - Translators should be able to add new terms and translations to it.
    - It should be possible to use it as help for translating strings.
