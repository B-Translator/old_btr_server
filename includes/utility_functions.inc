<?php
/**
 * Utility functions that are common for all the pages.
 */

/**
 * Returns an array of languages and their details.
 */
function l10n_suggestions_get_languages() {

  $arr_langs = array(
    'fr' => array(
      'code' => 'fr',
      'name' => 'French',
      'encoding' => 'latin1',
      'direction' => LANGUAGE_LTR,
    ),
    'sq' => array(
      'code' => 'sq',
      'name' => 'Albanian',
      'encoding' => 'latin1',
      'direction' => LANGUAGE_LTR,
    ),
  );

  return $arr_langs;
}

/**
 * Arrange the string/translation data returned from the DB
 * in another structure of arrays.
 *
 * @param $records
 *   An array of records, which are the query results
 *   returned from the DB (ordered by pid).
 *
 * @return
 *   A hierarchical associative array of strings and the corresponding
 *   translations.
 */
function l10n_suggestions_convert_to_hierarchical_array($records) {
  $arr_strings = array();
  $pid = '';
  foreach ($records as $rec) {
    if ($rec->pid != $pid) {
      $pid = $rec->pid;
      $arr_strings[$pid] = array(
        'pid' => $rec->pid,
        'phrase' => $rec->phrase,
        'p_hash' => $rec->p_hash,
        'translations' => array(),
      );
    }
    $arr_strings[$pid]['translations'][$rec->tid] = array(
      'tid' => $rec->tid,
      'lng' => $rec->lng,
      'translation' => $rec->translation,
      't_hash' => $rec->t_hash,
      'time_entered' => $rec->time_entered,
      'uid_entered' => $rec->uid_entered,
      'username' => $rec->username,
      'vcount' => $rec->vcount,
    );
  }
  return $arr_strings;
}

/**
 * Unpacks a string as retrieved from the database.
 *
 * Creates an array out of the string. If it was a single string, the array
 * will have one item. If the string was a plural string, the array will have
 * as many items as the language requires (two for source strings).
 *
 * @param $string
 *   The string with optional separation markers (NULL bytes)
 * @return
 *   An array of strings with one element for each plural form in case of
 *   a plural string, or one element in case of a regular string. This
 *  is called a $textarray elsewhere.
 */
function l10n_suggestions_unpack_string($string) {
  return explode("\0", $string);
}

/**
 * Packs a string for storage in the database.
 *
 * @param $string
 *   An array of strings.
 * @return
 *   A packed string with NULL bytes separating each string.
 */
function l10n_suggestions_pack_string($strings) {
  return implode("\0", $strings);
}

function l10n_suggestions_get_string_hash($l10n_string) {
  $l10n_string = preg_replace('/^ +/', '', $l10n_string);
  $l10n_string = preg_replace('/ +$/', '', $l10n_string);
  $l10n_string = sha1($l10n_string);
  return $l10n_string;
}

/**
 * Generate markup for an unpacked string.
 *
 * @param $textarray
 *   An array of strings as generated by l10n_suggestions_unpack_string().
 * @param $empty
 *   Specific data to include as the data to use when empty.
 */
function _l10n_suggestions_translate_render_textarray($textarray, $empty = '') {
  // data-empty is a proprietary attribute used in editor.css to be displayed when
  // starting to submit a new suggestion.
  $empty = !empty($empty) ? ' data-empty="' . check_plain($empty) . '"' : '';
  return "<span$empty>" . implode("</span><br /><span$empty>", array_map('check_plain', $textarray)) . '</span>';
}

/**
 * Generates the byline containing meta information about a string.
 */
function l10n_suggestions_translate_byline($name, $uid, $time, $medium, $type, $link_user = TRUE) {
  $params = array(
    '!author' => $uid ? ($link_user ? theme('username', array('account' => (object) array('name' => $name, 'uid' => $uid))) : check_plain($name)) : t('uknown user'),
    // Also skip handling time if uid was not specified (for decline entries
    // in the update, which have time for ordering reasons, but no uid).
    '@date' => $time && $uid ? format_date($time) : t('unknown time'),
    '@ago' => $time ? t('@time ago', array('@time' => format_interval(REQUEST_TIME - $time))) : t('no time record available'),
  );
  switch ($type) {
    case L10N_SERVER_ACTION_ADD:
      switch ($medium) {
        case L10N_SERVER_MEDIUM_IMPORT:
          return t('imported by !author <span title="@ago">on @date</span>', $params);
        case L10N_SERVER_MEDIUM_REMOTE:
          return t('remotely submitted by !author <span title="@ago">on @date</span>', $params);
        case L10N_SERVER_MEDIUM_WEB:
          return t('suggested on the web by !author <span title="@ago">on @date</span>', $params);
        case L10N_SERVER_MEDIUM_UNKNOWN:
          return t('suggested by !author <span title="@ago">on @date</span> (source unknown)', $params);
      }
      return;
    case L10N_SERVER_ACTION_READD:
      switch ($medium) {
        case L10N_SERVER_MEDIUM_IMPORT:
          return t('re-imported by !author <span title="@ago">on @date</span>', $params);
        case L10N_SERVER_MEDIUM_REMOTE:
          return t('remotely re-submitted by !author <span title="@ago">on @date</span>', $params);
        case L10N_SERVER_MEDIUM_WEB:
          return t('re-suggested on the web by !author <span title="@ago">on @date</span>', $params);
          // L10N_SERVER_MEDIUM_UNKNOWN does not apply, because we only have that
          // for backwards compatibility and L10N_SERVER_ACTION_READD did not
          // happen with data migrated (at least we did not know about it).
      }
      return;
    case L10N_SERVER_ACTION_APPROVE:
      return t('approved by !author <span title="@ago">on @date</span>', $params);
    case L10N_SERVER_ACTION_DECLINE:
      return t('declined by !author <span title="@ago">on @date</span>', $params);
    case L10N_SERVER_ACTION_DEMOTE:
      return t('demoted by !author <span title="@ago">on @date</span>', $params);
    default:
      // Default byline that work as a click-target to get more information.
      return t('by !author <span title="@ago">on @date</span>', $params);
  }
}

?>