<?php
/**
 * @file
 * Install functions for the profile B-Translator.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function btranslator_install() {

  // Get a connection to the l10n_feedback_db. All the queries
  // of the l10n_feedback module will use this connection.
  if (isset($GLOBALS['databases']['l10n_feedback_db']['default'])) {
    $GLOBALS['l10n_feedback_db'] = Database::getConnection('default', 'l10n_feedback_db');
  }
  else {
    $GLOBALS['l10n_feedback_db'] = Database::getConnection('default', 'default');
  }

  include_once DRUPAL_ROOT . '/profiles/standard/standard.install';
  standard_install();

  // enable themes and set the default theme
  theme_enable(array('bartik'));
  theme_enable(array('bartik1'));
  theme_enable(array('bartik_fb'));
  theme_enable(array('abessive'));
  theme_enable(array('rubik'));
  variable_set('theme_default', 'bartik1');

  // user settings
  variable_set('user_register', USER_REGISTER_VISITORS);
  variable_set('user_email_verification', TRUE);

  btranslator_install_variables();

  btranslator_install_mailsystem();
  //btranslator_install_blocks();
  //btranslator_install_roles();
  btranslator_install_menus();
  btranslator_install_actions();
}

function btranslator_install_variables()
{
  include drupal_get_path('profile', 'btranslator') . '/modules/features/set-variables.php';
}

function btranslator_install_mailsystem()
{
  variable_set('mailsystem_theme', 'current');

  $mail_system = variable_get('mail_system');
  $mail_system['default-system'] = 'MimeMailSystem';
  $mail_system['l10n_feedback'] = 'MimeMailSystem';

  variable_set('mail_system', $mail_system);
}

/*
function btranslator_install_blocks()
{
  $blocks = array(
    // show Disqus blocks on the first sidebar
    array(
      'module' => 'disqus',
      'delta'  => 'disqus_recent_comments',
      'region' => 'sidebar_first',
      'status' => 1,
      'weight' => 10,
      'cache'  => DRUPAL_CACHE_GLOBAL,
    ),
    array(
      'module' => 'disqus',
      'delta'  => 'disqus_popular_threads',
      'region' => 'sidebar_first',
      'status' => 1,
      'weight' => 11,
      'cache'  => DRUPAL_CACHE_GLOBAL,
    ),
    array(
      'module' => 'disqus',
      'delta'  => 'disqus_top_commenters',
      'region' => 'sidebar_first',
      'status' => 1,
      'weight' => 12,
      'cache'  => DRUPAL_CACHE_GLOBAL,
    ),
  );

  $default_theme = variable_get('theme_default', 'bartik1');

  foreach ($blocks as $block) {
    extract($block);
    db_update('block')
      ->fields(array(
          'status' => $status,
          'region' => $region,
          'weight' => $weight,
          'cache'  => $cache,
        ))
      ->condition('module', $module)
      ->condition('delta', $delta)
      ->condition('theme', $default_theme)
      ->execute();
  }
}

function btranslator_install_roles()
{
  // revoke access to comments, since commenting is done through disqus
  $roles = user_roles(FALSE, 'access comments');
  foreach ($roles as $rid=>$permission) {
    user_role_revoke_permissions($rid, array('access comments', 'post comments'));
  }

  // create new roles for contributors, translators and moderators
  // (role administrator already exists)
  $new_role_names = array('contributor', 'translator', 'moderator');
  foreach ($new_role_names as $role_name) {
    $role = new stdClass();
    $role->name = $role_name;
    user_role_save($role);
  }

  // assign permissions to the roles
  $contributor = user_role_load_by_name('contributor');
  $contributor_permissions['btranslator-vote'] = TRUE;
  $contributor_permissions['btranslator-suggest'] = TRUE;
  $contributor_permissions['btranslator-flag'] = TRUE;
  user_role_change_permissions($contributor->rid, $contributor_permissions);

  $translator = user_role_load_by_name('translator');
  $translator_permissions = $contributor_permissions;
  $translator_permissions['btranslator-import'] = TRUE;
  $translator_permissions['btranslator-export'] = TRUE;
  user_role_change_permissions($translator->rid, $translator_permissions);

  $moderator = user_role_load_by_name('moderator');
  $moderator_permissions = $contributor_permissions;
  $moderator_permissions['btranslator-stats'] = TRUE;
  $moderator_permissions['btranslator-resolve'] = TRUE;
  user_role_change_permissions($moderator->rid, $moderator_permissions);

  $administrator = user_role_load_by_name('administrator');
  $administrator_permissions['btranslator-admin'] = TRUE;
  user_role_change_permissions($administrator->rid, $administrator_permissions);
}
*/

function btranslator_install_menus()
{
  // add some menu items
  $menu_item = array(
    'link_title' => st('Translations'),
    'link_path' => 'translations',
    'menu_name' => 'main-menu',
    'weight' => 10,
  );
  menu_link_save($menu_item);

  $menu_item = array(
    'link_title' => st('Contact'),
    'link_path' => 'contact',
    'menu_name' => 'main-menu',
    'weight' => 11,
  );
  menu_link_save($menu_item);

  $menu_item = array(
    'link_title' => st('My account'),
    'link_path' => 'user',
    'menu_name' => 'user-menu',
    'weight' => -10,
  );
  menu_link_save($menu_item);

  // update the menu router information
  menu_rebuild();
}

function btranslator_install_actions()
{
  $site_mail = variable_get('site_mail');

  // create actions
  $action_id_1 = actions_save(
    'system_send_email_action',
    'system',
    array(
      'recipient' => $site_mail,
      'subject' => '[btranslator] New user: [user:name]',
      'message' => 'New user: [user:name]',
    ),
    t('Send e-mail to admin when a new user is registered')
  );
  $action_id_2 = actions_save(
    'system_send_email_action',
    'system',
    array(
      'recipient' => $site_mail,
      'subject' => '[btranslator] [user:name] has modified his account',
      'message' => 'The user [user:name] has modified his account.',
    ),
    t('Send e-mail to admin when user modifies his account')
  );

  // assign actions to triggers
  db_insert('trigger_assignments')
    ->fields(array('hook', 'aid', 'weight'))
    ->values(array('hook' => 'user_insert', 'aid' => $action_id_1, 'weight' => 0))
    ->values(array('hook' => 'user_update', 'aid' => $action_id_2, 'weight' => 0))
    ->execute();
}

